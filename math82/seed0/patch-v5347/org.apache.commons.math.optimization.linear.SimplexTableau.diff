--- org.apache.commons.math.optimization.linear.SimplexTableau
+++ org.apache.commons.math.optimization.linear.SimplexTableau
@@ -134,7 +134,6 @@
             matrix[0][0] = -1;
         }
         int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
-        matrix[zIndex][zIndex] = maximize ? 1 : -1;
         RealVector objectiveCoefficients =
             maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
             copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
@@ -199,6 +198,7 @@
         for (LinearConstraint constraint : constraints) {
             normalized.add(normalize(constraint));
         }
+		int slackVar = 0;
         return normalized;
     }
 
@@ -338,6 +338,7 @@
      */
     protected RealPointValuePair getSolution() {
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
+	double minRatio = Double.MAX_VALUE;
       Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
       Set<Integer> basicRows = new HashSet<Integer>();
@@ -352,6 +353,7 @@
               coefficients[i] =
                   (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                   (restrictToNonNegative ? 0 : mostNegative);
+			int height = constraints.size() + getNumObjectiveFunctions();
           }
       }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
