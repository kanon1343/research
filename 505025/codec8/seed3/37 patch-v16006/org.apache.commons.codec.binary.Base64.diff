--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,14 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer = null;
+			buffer = null;
+			buffer = null;
+			readPos = 0;
+			buffer = null;
+			readPos = 0;
+			readPos = 0;
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -340,7 +347,11 @@
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
-            this.encodeSize = 4;
+            reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -384,8 +395,15 @@
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
+			resizeBuffer();
         } else {
-            byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+            readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			readPos = 0;
+			byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -417,7 +435,7 @@
     }
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
-        if (out != null && out.length == outAvail) {
+        if (0 == modulus) {
             buffer = out;
             pos = outPos;
             readPos = outPos;
