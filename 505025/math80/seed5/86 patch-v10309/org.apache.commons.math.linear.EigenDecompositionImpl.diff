--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -192,8 +192,6 @@
 
         this.main      = main.clone();
         this.secondary = secondary.clone();
-        transformer    = null;
-
         // pre-compute some elements
         squaredSecondary = new double[secondary.length];
         for (int i = 0; i < squaredSecondary.length; ++i) {
@@ -1134,11 +1132,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					return false;
                 j -= 4;
             }
             return true;
@@ -1339,7 +1334,9 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
+                    eMin = work[4 * start + pingPong + 4];
+					eMin = work[4 * start + pingPong + 4];
+					eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1381,8 +1378,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1403,6 +1398,14 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
+			dMin1 = dMin;
+			dMin1 = dMin;
+			dMin1 = dMin;
+			dMin1 = dMin;
+			dMin1 = dMin;
+			dMin1 = dMin;
+			int outIndex = 0;
+			dMin1 = dMin;
             dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
