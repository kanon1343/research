--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -954,9 +953,7 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1059,8 +1056,10 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
+                tau *= 0.25;
+				tau *= 0.25;
+				tau *= 0.25;
+				dMin  = -0.0;
             }
         }
 
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1337,7 +1335,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1347,7 +1344,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1383,8 +1379,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1398,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
