--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -848,7 +848,6 @@
         dMin2 = 0;
         dN    = 0;
         dN1   = 0;
-        dN2   = 0;
         tau   = 0;
 
         // process split segments
@@ -868,8 +867,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -910,7 +907,8 @@
                             work[i + 2]  = -sigma;
                             split        = i / 4;
                             diagMax      = 0;
-                            offDiagMin   = work[i + 6];
+                            List<Number> components=new ArrayList<Number>();
+							offDiagMin   = work[i + 6];
                             previousEMin = work[i + 7];
                         } else {
                             diagMax      = Math.max(diagMax, work[i + 4]);
@@ -942,7 +940,14 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
+					{
+					}
+					{
+						d = work[i];
+					}
+					{
+						d = work[i];
+					}
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -955,9 +960,11 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
+					Arrays.sort(realEigenvalues);
+					Arrays.sort(realEigenvalues);
+					Arrays.sort(realEigenvalues);
+					Arrays.sort(realEigenvalues);
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1020,7 +1027,7 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
+					final int upperStart = 5 * main.length;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1053,9 +1060,6 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1089,7 +1093,8 @@
                    // convergence hidden by negative DN.
                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;
                     dMin = 0.0;
-                    updateSigma(tau);
+                    double res = 0;
+					updateSigma(tau);
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
                     // tau too big. Select new tau and try again.
@@ -1136,12 +1141,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    int outBlockIndex = 0;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1194,8 +1196,6 @@
         }
         lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));
 
-        // search upper eigenvalue
-        left  = lower - margin;
         right = upper + margin;
         for (int i = 0; i < maxIter; ++i) {
 
@@ -1338,16 +1338,12 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
                     work[j4] = work[j4 - 1] * tmp;
                     d *= tmp;
                 } else {
-                    work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1358,16 +1354,12 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
                     work[j4 - 1] = work[j4] * tmp;
                     d *= tmp;
                 } else {
-                    work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);
-                    d *= work[j4 + 2] / work[j4 - 3];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4 - 1]);
@@ -1384,14 +1376,12 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,7 +1393,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1536,7 +1525,6 @@
                 double b2 = work[np - 6];
                 final double gam = dN2;
                 if (work[np - 8] > b2 || work[np - 4] > b1) {
-                    return;
                 }
                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
 
