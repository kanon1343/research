--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -875,7 +875,6 @@
                     diagMin    = Math.min(diagMin, work[i + 4]);
                     offDiagMax = Math.max(offDiagMax, work[i + 2]);
                 }
-                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
             work[4 * n0 - 2] = offDiagMin;
@@ -964,7 +963,6 @@
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
                 } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
                }
             }
@@ -1059,8 +1057,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
             }
         }
 
@@ -1136,7 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1338,6 +1333,24 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1381,9 +1394,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
