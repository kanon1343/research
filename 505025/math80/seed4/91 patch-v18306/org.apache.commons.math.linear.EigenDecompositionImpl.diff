--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1060,7 +1059,6 @@
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
             }
         }
 
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1172,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1338,6 +1335,27 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1412,7 +1430,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
