--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,8 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
+                    tType -= 11;
+					d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -957,14 +958,12 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
                 } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
                }
             }
@@ -1019,7 +1018,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
                     work[k - 7] = tmp;
                 }
 
@@ -1059,8 +1057,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
             }
         }
 
@@ -1136,7 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1338,6 +1333,21 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
+					j4 = j4 + 4;
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1562,7 +1572,6 @@
                 }
 
                 if (a2 < cnst1) {
-                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
                     tau = s;
                 }
