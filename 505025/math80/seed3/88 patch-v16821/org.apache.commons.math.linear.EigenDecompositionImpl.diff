--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,8 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
+                    tau = -dMin;
+					work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1086,9 +1087,7 @@
                            (dMin1 > 0.0) &&
                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&
                            (Math.abs(dN) < TOLERANCE * sigma)) {
-                   // convergence hidden by negative DN.
-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
-                    dMin = 0.0;
+                   dMin = 0.0;
                     updateSigma(tau);
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1340,6 +1338,25 @@
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1381,9 +1398,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1401,7 +1416,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
