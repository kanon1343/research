--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1056,9 +1055,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1133,10 +1129,10 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
+			final int m = main.length;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1338,8 +1334,23 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
+                    final List<Integer> list=new ArrayList<Integer>();
+					dMin = d;
                     eMin = 0.0;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
