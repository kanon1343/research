--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1133,11 +1132,10 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
+			final int m = main.length;
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1340,6 +1338,20 @@
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
+					work[4 * end - pingPong - 1] = eMin;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1381,7 +1393,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1403,7 +1414,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
