--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -846,7 +846,6 @@
         tType = 0;
         dMin1 = 0;
         dMin2 = 0;
-        dN    = 0;
         dN1   = 0;
         dN2   = 0;
         tau   = 0;
@@ -909,7 +908,6 @@
                             // insert a split
                             work[i + 2]  = -sigma;
                             split        = i / 4;
-                            diagMax      = 0;
                             offDiagMin   = work[i + 6];
                             previousEMin = work[i + 7];
                         } else {
@@ -942,6 +940,8 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1136,8 +1136,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    this.imagEigenvalues = imagEigenvalues;
                 }
                 j -= 4;
             }
@@ -1274,6 +1273,7 @@
         eMin = work[4 * start + pingPong + 4];
         double d = work[4 * start + pingPong] - tau;
         dMin = d;
+		int outBlockIndex = 0;
         dMin1 = -work[4 * start + pingPong];
 
         if (pingPong == 0) {
@@ -1391,7 +1391,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
