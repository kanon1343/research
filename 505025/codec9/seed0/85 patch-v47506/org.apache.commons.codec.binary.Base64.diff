--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -492,7 +491,268 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1239,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
