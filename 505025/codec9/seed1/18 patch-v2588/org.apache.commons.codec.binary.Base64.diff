--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,29 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        switch (modulus) {
+		case 2:
+			x = x >> 4;
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			break;
+		case 3:
+			x = x >> 2;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			break;
+		}
+		switch (modulus) {
+		case 2:
+			x = x >> 4;
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			break;
+		case 3:
+			x = x >> 2;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			break;
+		}
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -382,7 +404,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -411,7 +432,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -973,7 +993,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1073,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
