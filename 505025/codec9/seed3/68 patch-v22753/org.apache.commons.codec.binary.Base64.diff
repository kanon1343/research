--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,17 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
     }
 
     /**
@@ -409,7 +420,14 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +489,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -967,13 +988,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
