--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,82 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+				break;
+			case 3:
+				buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+				break;
+			case 4:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 5:
+				x = x >> 1;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 6:
+				x = x >> 6;
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 7:
+				x = x >> 3;
+				buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
+		eof = true;
     }
 
     /**
@@ -406,10 +482,13 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
-            System.arraycopy(buffer, readPos, b, bPos, len);
+            buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
+				buffer = null;
             }
             return len;
         }
@@ -471,7 +550,12 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+				resizeBuffer();
+				resizeBuffer();
+                x = x >> 1;
+				x = x >> 1;
+				x = x >> 1;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1057,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
