--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,8 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -451,8 +453,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        byte b = in[inPos++];
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -951,6 +954,9 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         readResults(buf, 0, buf.length);
         return buf;
     }
@@ -979,7 +985,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
