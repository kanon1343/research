--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,12 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -492,6 +498,444 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+							byte[] buf = new byte[pos - readPos];
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -951,6 +1395,27 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
+		buffer[pos++] = PAD;
         readResults(buf, 0, buf.length);
         return buf;
     }
@@ -973,7 +1438,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
