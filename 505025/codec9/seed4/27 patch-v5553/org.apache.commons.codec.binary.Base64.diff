--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,8 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
     }
 
     /**
@@ -381,7 +383,8 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            pos += lineSeparator.length;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
         } else {
@@ -413,7 +416,9 @@
             }
             return len;
         }
-        return eof ? -1 : 0;
+        resizeBuffer();
+		resizeBuffer();
+		return eof ? -1 : 0;
     }
 
     /**
@@ -440,7 +445,7 @@
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
-        if (inAvail < 0) {
+        if (buffer != null) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
@@ -967,13 +972,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
