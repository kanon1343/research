--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,41 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		switch (modulus) {
+		case 2:
+			x = x >> 4;
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			break;
+		case 3:
+			x = x >> 2;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			break;
+		}
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
     }
 
     /**
@@ -338,7 +373,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +1009,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
