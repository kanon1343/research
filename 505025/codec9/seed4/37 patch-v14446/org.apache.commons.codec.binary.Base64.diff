--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,17 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
+		eof = true;
+		buffer = new byte[DEFAULT_BUFFER_SIZE];
     }
 
     /**
@@ -381,7 +392,11 @@
     /** Doubles our buffer. */
     private void resizeBuffer() {
         if (buffer == null) {
-            buffer = new byte[DEFAULT_BUFFER_SIZE];
+            pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
             readPos = 0;
         } else {
@@ -413,7 +428,8 @@
             }
             return len;
         }
-        return eof ? -1 : 0;
+        resizeBuffer();
+		return eof ? -1 : 0;
     }
 
     /**
@@ -979,7 +995,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
