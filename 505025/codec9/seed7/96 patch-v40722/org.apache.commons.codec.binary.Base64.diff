--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -388,6 +388,150 @@
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
+			switch (modulus) {
+			case 1:
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				break;
+			case 2:
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+				}
+				break;
+			}
+			switch (modulus) {
+			case 1:
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				break;
+			case 2:
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+				}
+				break;
+			}
+			switch (modulus) {
+			case 1:
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				break;
+			case 2:
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+				}
+				break;
+			}
+			switch (modulus) {
+			case 1:
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				break;
+			case 2:
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+				}
+				break;
+			}
+			switch (modulus) {
+			case 1:
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				break;
+			case 2:
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+				}
+				break;
+			}
+			switch (modulus) {
+			case 1:
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				break;
+			case 2:
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+				}
+				break;
+			}
+			switch (modulus) {
+			case 1:
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				break;
+			case 2:
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+				}
+				break;
+			}
+			switch (modulus) {
+			case 1:
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				break;
+			case 2:
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+				}
+				break;
+			}
         }
     }
 
@@ -409,7 +553,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -451,8 +594,36 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						buffer[pos++] = PAD;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,7 +663,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        x = x >> 4;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1151,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
