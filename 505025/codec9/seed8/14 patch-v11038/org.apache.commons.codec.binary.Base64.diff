--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -449,6 +449,16 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				readPos = 0;
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -470,7 +480,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -479,7 +490,9 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
-                int b = in[inPos++];
+                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				int b = in[inPos++];
                 if (b < 0) {
                     b += 256;
                 }
@@ -979,7 +992,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
