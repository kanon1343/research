--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
+            eof = false;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -441,8 +441,12 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            {
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -470,7 +474,9 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                x = x >> 4;
+				eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -979,7 +985,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
