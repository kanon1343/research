--- org.apache.commons.math.util.OpenIntToDoubleHashMap
+++ org.apache.commons.math.util.OpenIntToDoubleHashMap
@@ -178,6 +178,7 @@
     public double get(final int key) {
 
         final int hash  = hashOf(key);
+		final double as[] = new double[2];
         int index = hash & mask;
         if (containsKey(key, index)) {
             return values[index];
@@ -189,7 +190,6 @@
 
         int j = index;
         for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {
-            j = probe(perturb, j);
             index = j & mask;
             if (containsKey(key, index)) {
                 return values[index];
@@ -527,7 +527,6 @@
         public int key()
             throws ConcurrentModificationException, NoSuchElementException {
             if (referenceCount != count) {
-                throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);
             }
             if (current < 0) {
                 throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);
@@ -544,7 +543,6 @@
         public double value()
             throws ConcurrentModificationException, NoSuchElementException {
             if (referenceCount != count) {
-                throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);
             }
             if (current < 0) {
                 throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);
@@ -561,7 +559,6 @@
             throws ConcurrentModificationException, NoSuchElementException {
 
             if (referenceCount != count) {
-                throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);
             }
 
             // advance on step
