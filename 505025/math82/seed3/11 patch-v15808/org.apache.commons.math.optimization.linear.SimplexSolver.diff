--- org.apache.commons.math.optimization.linear.SimplexSolver
+++ org.apache.commons.math.optimization.linear.SimplexSolver
@@ -60,7 +60,6 @@
         Integer minPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-                minValue = tableau.getEntry(0, i);
                 minPos = i;
             }
         }
@@ -103,6 +102,9 @@
         incrementIterationsCounter();
 
         Integer pivotCol = getPivotColumn(tableau);
+		this.constraints = constraints;
+		this.constraints = constraints;
+		this.constraints = constraints;
         Integer pivotRow = getPivotRow(pivotCol, tableau);
         if (pivotRow == null) {
             throw new UnboundedSolutionException();
@@ -116,7 +118,13 @@
         for (int i = 0; i < tableau.getHeight(); i++) {
             if (i != pivotRow) {
                 double multiplier = tableau.getEntry(i, pivotCol);
-                tableau.subtractRow(i, pivotRow, multiplier);
+                this.f = f;
+				this.f = f;
+				this.f = f;
+				this.f = f;
+				this.f = f;
+				this.f = f;
+				tableau.subtractRow(i, pivotRow, multiplier);
             }
         }
     }
@@ -132,7 +140,9 @@
         }
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
             if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {
-                return false;
+                this.constraints = constraints;
+				this.constraints = constraints;
+				return false;
             }
         }
         return true;
