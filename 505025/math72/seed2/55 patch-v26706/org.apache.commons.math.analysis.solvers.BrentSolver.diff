--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x0 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -168,7 +167,10 @@
         clearResult();
         verifyInterval(min, max);
 
-        double ret = Double.NaN;
+        verifyInterval(min, max);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
+		double ret = Double.NaN;
 
         double yMin = f.value(min);
         double yMax = f.value(max);
@@ -189,7 +191,11 @@
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
         } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
+            clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			// solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
             // either min or max is a root
@@ -241,10 +247,32 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                x0 = x1;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
