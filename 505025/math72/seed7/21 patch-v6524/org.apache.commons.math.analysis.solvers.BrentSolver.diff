--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,11 +227,24 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				clearResult();
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
@@ -245,7 +256,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
