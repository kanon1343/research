--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,24 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.f = f;
+			this.f = f;
+			this.f = f;
+			this.f = f;
+			double x1 = max;
+			this.f = f;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double p;
             return result;
         }
 
@@ -181,7 +185,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -236,6 +240,21 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
+				{
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
@@ -245,7 +264,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
