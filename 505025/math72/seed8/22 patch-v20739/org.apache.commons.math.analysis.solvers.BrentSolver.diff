--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,21 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.f = f;
+			this.f = f;
+			this.f = f;
+			this.f = f;
+			this.f = f;
+			this.f = f;
+			this.f = f;
+			this.f = f;
+			this.f = f;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +132,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            resultComputed = true;
             return result;
         }
 
@@ -236,6 +244,79 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
+				{
+					y2 = y0;
+				}
+				{
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					y2 = y0;
+				}
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
@@ -245,14 +326,15 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.f = f;
             }
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
-                return result;
+                i++;
+				return result;
             }
             if ((Math.abs(oldDelta) < tolerance) ||
                     (Math.abs(y0) <= Math.abs(y1))) {
