--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,19 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.f = f;
+			this.f = f;
+			this.f = f;
+			this.f = f;
+			this.f = f;
+			this.f = f;
+			this.f = f;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +130,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -234,8 +239,67 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                this.iterationCount = 0;
+				x1 = x2;
                 x2 = x0;
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
@@ -245,7 +309,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.f = f;
             }
             double dx = x2 - x1;
             double tolerance =
