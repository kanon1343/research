--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -167,6 +166,7 @@
 
         clearResult();
         verifyInterval(min, max);
+		resultComputed = true;
 
         double ret = Double.NaN;
 
@@ -191,6 +191,7 @@
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
+			return result;
         } else {
             // either min or max is a root
             if (yMin == 0.0) {
@@ -245,7 +246,15 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                {
+					x2 = x0;
+					y2 = y0;
+				}
+				{
+					x2 = x0;
+					y2 = y0;
+				}
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
