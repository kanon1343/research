--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,15 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -227,12 +233,59 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
         double oldDelta = delta;
 
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
+                x2 = x0;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				x2 = x0;
+				// use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
