--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -156,8 +156,6 @@
         FunctionEvaluationException {
         
         clearResult();
-        verifyInterval(min, max);
-        
         double ret = Double.NaN;
         
         double yMin = f.value(min);
@@ -231,6 +229,12 @@
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
@@ -250,7 +254,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -261,6 +264,8 @@
                 if (x0 == x2) {
                     // Linear interpolation.
                     p = dx * r3;
+					++i;
+					++i;
                     p1 = 1.0 - r3;
                 } else {
                     // Inverse quadratic interpolation.
