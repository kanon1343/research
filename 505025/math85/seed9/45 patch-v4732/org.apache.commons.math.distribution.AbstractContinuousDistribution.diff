--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -86,23 +86,14 @@
                     rootFindingFunction, getInitialDomain(p),
                     lowerBound, upperBound);
         }  catch (ConvergenceException ex) {
-            /* 
-             * Check domain endpoints to see if one gives value that is within
-             * the default solver's defaultAbsoluteAccuracy of 0 (will be the
-             * case if density has bounded support and p is 0 or 1).
-             * 
-             * TODO: expose the default solver, defaultAbsoluteAccuracy as
-             * a constant.
-             */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
-                return lowerBound;
-            }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
-                return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
-        }
+			if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+				return lowerBound;
+			}
+			if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+				return upperBound;
+			}
+			throw new MathException(ex);
+		}
 
         // find root
         double root = UnivariateRealSolverUtils.solve(rootFindingFunction,
