--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -92,7 +92,6 @@
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
-    interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
@@ -111,9 +110,17 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
 
     finalized         = false;
     this.forward      = forward;
@@ -244,6 +251,28 @@
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
       dirtyState       = true;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
   }
 
   /** {@inheritDoc} */
@@ -269,7 +298,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!forward) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
