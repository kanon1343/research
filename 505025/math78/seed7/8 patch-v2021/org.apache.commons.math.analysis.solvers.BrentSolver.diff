--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -156,8 +156,6 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
-
         double ret = Double.NaN;
 
         double yMin = f.value(min);
@@ -240,7 +238,8 @@
                 return result;
             }
             double dx = x2 - x1;
-            double tolerance =
+            this.resultComputed = true;
+			double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
@@ -276,10 +275,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    checkResultComputed();
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -304,7 +300,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            y1 = f.value(x1);
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
