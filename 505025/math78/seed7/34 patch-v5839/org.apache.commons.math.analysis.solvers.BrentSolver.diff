--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,13 +276,12 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+					double r1 = y0 / y2;
+					double r2 = y1 / y2;
+					p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+					p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+				} else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
