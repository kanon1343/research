--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,36 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -223,15 +253,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				i++;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
