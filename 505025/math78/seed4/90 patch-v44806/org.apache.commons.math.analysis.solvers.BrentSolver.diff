--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,28 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +187,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +299,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    this.functionValueAccuracy = defaultFunctionValueAccuracy;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
