--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,7 +170,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            nextAction = EventHandler.CONTINUE;
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -182,6 +183,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +221,37 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
