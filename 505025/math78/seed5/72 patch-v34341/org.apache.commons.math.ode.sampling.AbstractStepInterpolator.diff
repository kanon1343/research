--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,13 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
+	interpolatedTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -117,7 +117,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    this.forward = forward;
 
   }
 
@@ -179,7 +179,7 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -243,7 +243,48 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -273,6 +314,12 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+		this.dirtyState = true;
+		this.dirtyState = true;
+		this.dirtyState = true;
+		this.dirtyState = true;
+		this.dirtyState = true;
+		this.dirtyState = true;
           dirtyState = false;
       }
 
