--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -271,9 +275,26 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedState;
@@ -288,7 +309,7 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedDerivatives;
