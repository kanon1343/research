--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,14 +107,11 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -271,6 +268,15 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		final int n = (currentState == null) ? -1 : currentState.length;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
