--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -252,7 +252,9 @@
                 delta = 0.5 * dx;
                 oldDelta = delta;
             } else {
-                double r3 = y1 / y0;
+                oldDelta = delta;
+				clearResult();
+				double r3 = y1 / y0;
                 double p;
                 double p1;
                 // the equality test (x0 == x2) is intentional,
@@ -274,8 +276,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if ((y1 > 0) == (y2 > 0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
