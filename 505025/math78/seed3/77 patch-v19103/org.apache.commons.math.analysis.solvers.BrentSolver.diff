--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,13 +274,13 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (f == null) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    y2 = y0;
+					oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
