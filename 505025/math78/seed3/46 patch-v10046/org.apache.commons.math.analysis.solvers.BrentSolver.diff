--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -239,7 +239,8 @@
                 setResult(x1, i);
                 return result;
             }
-            double dx = x2 - x1;
+            this.iterationCount = 0;
+			double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
