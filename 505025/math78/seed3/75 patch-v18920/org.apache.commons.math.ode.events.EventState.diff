--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,12 +176,32 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				pendingEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -200,7 +220,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +235,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
