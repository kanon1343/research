--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -251,6 +251,14 @@
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
+				{
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				}
+				{
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				}
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +284,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
