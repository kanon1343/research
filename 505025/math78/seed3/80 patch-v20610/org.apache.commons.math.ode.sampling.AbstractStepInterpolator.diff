--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedTime = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -113,7 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -175,7 +175,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = isForward;
@@ -271,6 +271,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
