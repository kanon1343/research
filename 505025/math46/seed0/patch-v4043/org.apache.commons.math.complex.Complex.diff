--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,9 +255,7 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isInfinite()) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +287,18 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        StringBuffer imAppendTo = new StringBuffer();
+		final List<Complex> result=new ArrayList<Complex>();
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
