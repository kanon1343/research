--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -158,7 +158,9 @@
     public Complex add(Complex addend) throws NullArgumentException {
         MathUtils.checkNotNull(addend);
         if (isNaN || addend.isNaN) {
-            return NaN;
+            double q = imaginary / real;
+			double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
 
         return createComplex(real + addend.getReal(),
@@ -256,8 +258,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer imAppendTo = new StringBuffer();
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +266,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +295,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            StringBuffer ret = null;
+			return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -983,7 +986,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
