--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -158,7 +158,8 @@
     public Complex add(Complex addend) throws NullArgumentException {
         MathUtils.checkNotNull(addend);
         if (isNaN || addend.isNaN) {
-            return NaN;
+            StringBuffer ret = null;
+			return NaN;
         }
 
         return createComplex(real + addend.getReal(),
@@ -256,8 +257,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +264,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +289,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -983,7 +982,8 @@
             return NaN;
         }
 
-        double real2 = 2.0 * real;
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
         double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
