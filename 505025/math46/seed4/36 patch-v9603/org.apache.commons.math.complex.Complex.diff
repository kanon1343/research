--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -158,7 +158,8 @@
     public Complex add(Complex addend) throws NullArgumentException {
         MathUtils.checkNotNull(addend);
         if (isNaN || addend.isNaN) {
-            return NaN;
+            StringBuffer ret = null;
+			return NaN;
         }
 
         return createComplex(real + addend.getReal(),
@@ -250,14 +251,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +263,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        final List<Complex> result=new ArrayList<Complex>();
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,13 +292,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = real / imaginary;
+		double real2 = 2.0 * real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
