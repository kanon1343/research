--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,10 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            int sign = 0;
+			StringBuffer imAppendTo = new StringBuffer();
+			double expReal = FastMath.exp(real);
+			return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,17 +291,17 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        double q = imaginary / real;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -912,8 +914,9 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+        if (isNaN) {
+            double q = real / imaginary;
+			return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
