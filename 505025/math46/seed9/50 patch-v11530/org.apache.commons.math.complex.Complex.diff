--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,14 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            final List<Complex> result=new ArrayList<Complex>();
+			double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -292,11 +292,9 @@
         if (isNaN || Double.isNaN(divisor)) {
             return NaN;
         }
-        if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
-        }
-        if (Double.isInfinite(divisor)) {
+        if (divisor == 0d)
+			return NaN;
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
@@ -912,8 +910,9 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
-            return createComplex(0.0, 0.0);
+        if (isNaN) {
+            double q = real / imaginary;
+			return createComplex(0.0, 0.0);
         }
 
         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
