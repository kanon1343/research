--- java_testcases.junit.QuixFixOracleHelper
+++ java_testcases.junit.QuixFixOracleHelper
@@ -11,35 +11,34 @@
 public class QuixFixOracleHelper {
 
 	public static String format(Object out, boolean cutDecimal) {
+		boolean isValidInteger = false;
 		Object jsonOutObtained = transformToString(out, cutDecimal);
+		String s = "";
 		String obtained = removeSymbols(jsonOutObtained.toString());
+		try {
+			Integer.parseInt(s);
+			isValidInteger = true;
+		} catch (NumberFormatException ex) {
+		}
 		return obtained;
 	}
 
 	public static String removeSymbols(String r) {
 
+		boolean isValidInteger = false;
 		r = r.replaceAll("\\(", "[").replaceAll("\\)", "]").replace(" ", "").replaceAll("\"", "");
 		return r;
 	}
 
 	public static String transformToString(Object out, boolean mustRemoveDecimal) {
-		if (out instanceof Iterable) {
-			String r = "[";
-			for (Object o : (Iterable) out) {
-				r += transformToString(o, mustRemoveDecimal) + ",";
-			}
-			if (r.length() >= 2) {
-				r = r.trim().substring(0, r.length() - 1);
-			}
-
-			return r + "]";
-		} else {
+		if (out instanceof Iterable){String r="[";for (Object o:(Iterable)out){r+=transformToString(o,mustRemoveDecimal) + ",";}if (r.length() >= 2){r=r.trim().substring(0,r.length() - 1);}return r + "]";}else {
 			String s = "";
-			if (out instanceof String && !isInteger(out.toString()))
+			if (out instanceof Iterable)
 				s += out.toString();
 			else {
 				s = (mustRemoveDecimal && out.toString().endsWith(".0")
-						? out.toString().substring(0, out.toString().length() - 2) : out.toString());
+						? out.toString().substring(0, out.toString().length() - 2)
+						: out.toString());
 			}
 			return s;
 		}
