--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -91,6 +91,7 @@
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
+	interpolatedState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -113,7 +114,9 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    finalized = false;
+	finalized = false;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -217,6 +220,8 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	this.dirtyState = true;
+	this.dirtyState = true;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -242,7 +247,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -272,7 +276,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          this.forward = forward;
           dirtyState = false;
       }
 
@@ -287,7 +291,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          this.forward = forward;
           dirtyState = false;
       }
 
