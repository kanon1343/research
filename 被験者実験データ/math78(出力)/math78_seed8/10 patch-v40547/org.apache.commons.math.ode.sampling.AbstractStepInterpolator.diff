--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,26 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    interpolatedTime = Double.NaN;
     currentTime             = Double.NaN;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
+	currentState = null;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,18 +116,34 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
+    interpolatedTime = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -269,9 +295,50 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		setInterpolatedTime(getInterpolatedTime());
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
@@ -284,7 +351,7 @@
   public double[] getInterpolatedDerivatives() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
