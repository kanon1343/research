--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,7 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        increasing = true;
         g0Positive = g0 >= 0;
     }
 
@@ -183,6 +183,7 @@
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				ga = gb;
 
                 // check events occurrence
                 if (g0Positive ^ (gb >= 0)) {
@@ -200,7 +201,39 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    {
+						increasing = gb >= ga;
+						final UnivariateRealFunction f = new UnivariateRealFunction() {
+							public double value(final double t) throws FunctionEvaluationException {
+								try {
+									interpolator.setInterpolatedTime(t);
+									return handler.g(t, interpolator.getInterpolatedState());
+								} catch (DerivativeException e) {
+									throw new FunctionEvaluationException(e, t);
+								} catch (EventException e) {
+									throw new FunctionEvaluationException(e, t);
+								}
+							}
+						};
+						final BrentSolver solver = new BrentSolver();
+						solver.setAbsoluteAccuracy(convergence);
+						solver.setMaximalIterationCount(maxIterationCount);
+						final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+						if ((Math.abs(root - ta) <= convergence)
+								&& (Math.abs(root - previousEventTime) <= convergence)) {
+							ta = tb;
+							ga = gb;
+						} else if (Double.isNaN(previousEventTime)
+								|| (Math.abs(previousEventTime - root) > convergence)) {
+							pendingEventTime = root;
+							if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+								return false;
+							}
+							pendingEvent = true;
+							return true;
+						}
+					}
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -215,6 +248,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					forward = interpolator.isForward();
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
