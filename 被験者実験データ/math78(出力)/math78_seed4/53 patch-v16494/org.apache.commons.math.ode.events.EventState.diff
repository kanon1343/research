--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -181,10 +180,29 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
+                pendingEventTime = Double.NaN;
+				pendingEventTime = Double.NaN;
+				pendingEventTime = Double.NaN;
+				pendingEventTime = Double.NaN;
+				pendingEventTime = Double.NaN;
+				pendingEventTime = Double.NaN;
+				pendingEventTime = Double.NaN;
+				interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
-
-                // check events occurrence
+				ga = gb;
+				ga = gb;
+				ga = gb;
+				ga = gb;
+				ga = gb;
+				ga = gb;
+				ga = gb;
+				ga = gb;
+				ga = gb;
+				ga = gb;
+				ga = gb;
+				ga = gb;
+				ga = gb;
+				// check events occurrence
                 if (g0Positive ^ (gb >= 0)) {
                     // there is a sign change: an event is expected during this step
 
@@ -216,6 +234,7 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					ga = gb;
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
