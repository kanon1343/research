--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentState = null;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentState = null;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +170,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentState = null;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -209,6 +209,20 @@
    */
   public void shift() {
     previousTime = currentTime;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
   }
 
   /** Store the current step time.
@@ -242,7 +256,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      this.dirtyState = true;
       dirtyState       = true;
   }
 
@@ -271,6 +285,13 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		currentTime = Double.NaN;
+		currentTime = Double.NaN;
+		currentTime = Double.NaN;
+		currentTime = Double.NaN;
+		currentTime = Double.NaN;
+		currentTime = Double.NaN;
+		currentTime = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
