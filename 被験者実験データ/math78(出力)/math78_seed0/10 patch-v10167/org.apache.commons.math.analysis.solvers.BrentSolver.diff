--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,12 +258,27 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i <= maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
                 } else {
-                    // Inverse quadratic interpolation.
+                    delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					// Inverse quadratic interpolation.
                     double r1 = y0 / y2;
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
@@ -304,7 +319,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
