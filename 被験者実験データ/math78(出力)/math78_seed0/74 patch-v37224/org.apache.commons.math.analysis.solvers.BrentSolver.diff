--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -263,7 +263,81 @@
                     p = dx * r3;
                     p1 = 1.0 - r3;
                 } else {
-                    // Inverse quadratic interpolation.
+                    delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					// Inverse quadratic interpolation.
                     double r1 = y0 / y2;
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
@@ -275,14 +349,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					delta = x1 - x0;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
