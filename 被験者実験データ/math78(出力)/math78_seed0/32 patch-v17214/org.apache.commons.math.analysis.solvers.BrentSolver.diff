--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,11 +233,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                x0 = x1;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -263,9 +260,31 @@
                     p = dx * r3;
                     p1 = 1.0 - r3;
                 } else {
-                    // Inverse quadratic interpolation.
+                    delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					delta = 0.5 * oldDelta;
+					// Inverse quadratic interpolation.
                     double r1 = y0 / y2;
-                    double r2 = y1 / y2;
+                    y0 = y1;
+					y0 = y1;
+					double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
@@ -274,8 +293,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(y1) > Math.abs(y0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
