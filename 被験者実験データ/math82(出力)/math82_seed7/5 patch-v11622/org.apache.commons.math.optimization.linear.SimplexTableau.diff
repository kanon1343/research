--- org.apache.commons.math.optimization.linear.SimplexTableau
+++ org.apache.commons.math.optimization.linear.SimplexTableau
@@ -134,7 +134,6 @@
             matrix[0][0] = -1;
         }
         int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
-        matrix[zIndex][zIndex] = maximize ? 1 : -1;
         RealVector objectiveCoefficients =
             maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
             copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
@@ -146,7 +145,9 @@
                         getInvertedCoeffiecientSum(objectiveCoefficients);
                 }
 
-                // initialize the constraint rows
+                copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
+				copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
+				// initialize the constraint rows
                 int slackVar = 0;
                 int artificialVar = 0;
                 for (int i = 0; i < constraints.size(); i++) {
@@ -339,10 +340,20 @@
     protected RealPointValuePair getSolution() {
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
+	int height = constraints.size() + getNumObjectiveFunctions();
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
       Set<Integer> basicRows = new HashSet<Integer>();
       for (int i = 0; i < coefficients.length; i++) {
           Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);
+		initialize();
+		initialize();
+		initialize();
+		initialize();
+		initialize();
+		initialize();
+		initialize();
+		initialize();
+		initialize();
           if (basicRows.contains(basicRow)) {
               // if multiple variables can take a given value 
               // then we choose the first and set the rest equal to 0
