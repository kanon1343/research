--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -958,6 +957,18 @@
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,8 +1147,11 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    ++k;
+					++k;
+					++k;
+					++k;
+					work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1381,7 +1395,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1401,7 +1414,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
