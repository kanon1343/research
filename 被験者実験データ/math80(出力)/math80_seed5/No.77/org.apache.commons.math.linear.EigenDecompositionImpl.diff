--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -958,6 +958,33 @@
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					cachedV.setEntry(k, k, 1);
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1134,11 +1161,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					dN = 0;
                 j -= 4;
             }
             return true;
