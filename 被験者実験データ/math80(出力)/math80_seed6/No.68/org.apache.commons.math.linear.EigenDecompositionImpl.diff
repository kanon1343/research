--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,7 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
+                    dMin = dN;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1380,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1401,7 +1399,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
@@ -1738,6 +1735,25 @@
         // perfectly shifted tridiagonal matrix
         final int m = main.length;
         stationaryQuotientDifferenceWithShift(d, l, eigenvalue);
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
         progressiveQuotientDifferenceWithShift(d, l, eigenvalue);
 
         // select the twist index leading to
