--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,8 +955,42 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
-                    work[j + 2] = 0.0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1170,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1175,7 +1208,7 @@
         // search lower eigenvalue
         double left  = lower - margin;
         double right = upper + margin;
-        for (int i = 0; i < maxIter; ++i) {
+        for (int i = 0;; ++i) {
 
             final double range = right - left;
             if ((range < absoluteTolerance) ||
@@ -1381,7 +1414,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
