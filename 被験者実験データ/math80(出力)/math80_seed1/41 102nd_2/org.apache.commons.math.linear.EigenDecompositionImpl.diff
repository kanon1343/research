--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -193,6 +193,7 @@
         this.main      = main.clone();
         this.secondary = secondary.clone();
         transformer    = null;
+		pingPong = 1 - pingPong;
 
         // pre-compute some elements
         squaredSecondary = new double[secondary.length];
@@ -966,6 +967,7 @@
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
+					throw new NullPointerException();
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1138,6 +1140,14 @@
                     final double tmp = work[i + k];
                     work[i + k] = work[j - k];
                     work[j - k] = tmp;
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
                 }
                 j -= 4;
             }
@@ -1381,7 +1391,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1401,9 +1410,14 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
