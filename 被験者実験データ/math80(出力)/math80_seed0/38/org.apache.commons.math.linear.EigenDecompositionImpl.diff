--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -201,7 +201,6 @@
             squaredSecondary[i] = s * s;
         }
 
-        this.splitTolerance = splitTolerance;
         decompose();
 
     }
@@ -868,8 +867,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -1100,6 +1097,7 @@
                         // late failure. Gives excellent shift.
                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
                         tType -= 11;
+						realEigenvalues = new double[main.length];
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
@@ -1136,8 +1134,19 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    --j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					work[j - k] = tmp;
                 }
                 j -= 4;
             }
