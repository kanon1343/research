--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,14 +106,24 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            {
+				setResult(initial, 0);
+				return result;
+			}
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+            double ret = Double.NaN;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +134,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +190,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -232,7 +240,20 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
+                y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				// use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
