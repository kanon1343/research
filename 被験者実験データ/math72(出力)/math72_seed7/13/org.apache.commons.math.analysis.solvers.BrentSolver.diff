--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,28 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            {
+				setResult(initial, 0);
+				return result;
+			}
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
+			clearResult();
+			clearResult();
+			clearResult();
+			verifySequence(min, initial, max);
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
             return result;
         }
 
@@ -232,19 +247,24 @@
         int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
+                y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				// use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
