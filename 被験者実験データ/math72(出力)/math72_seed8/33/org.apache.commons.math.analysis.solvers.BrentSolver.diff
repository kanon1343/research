--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            final double denominator;
             return result;
         }
 
@@ -182,7 +179,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -227,9 +227,47 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
-        double oldDelta = delta;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		double oldDelta = delta;
 
         int i = 0;
+		oldDelta = x2 - x1;
+		oldDelta = x2 - x1;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -238,13 +276,52 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+				{
+					x2 = x0;
+					y2 = y0;
+					delta = x1 - x0;
+					oldDelta = delta;
+				}
+                iterationCount += this.iterationCount;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
                 setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
