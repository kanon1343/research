--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,22 +99,22 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            iterationCount += this.iterationCount;
+			iterationCount += this.iterationCount;
+			resultComputed = true;
+			iterationCount += this.iterationCount;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,9 +234,60 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
-                x2 = x0;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				delta = (x0 - x1) / (1 - y0 / y1);
+				delta = (x0 - x1) / (1 - y0 / y1);
+				delta = (x0 - x1) / (1 - y0 / y1);
+				delta = (x0 - x1) / (1 - y0 / y1);
+				delta = (x0 - x1) / (1 - y0 / y1);
+				delta = (x0 - x1) / (1 - y0 / y1);
+				delta = (x0 - x1) / (1 - y0 / y1);
+				delta = (x0 - x1) / (1 - y0 / y1);
+				delta = (x0 - x1) / (1 - y0 / y1);
+				delta = (x0 - x1) / (1 - y0 / y1);
+				x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x2 = x0;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				resultComputed = true;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
@@ -245,7 +295,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -305,7 +354,8 @@
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
-            y1 = f.value(x1);
+            resultComputed = true;
+			y1 = f.value(x1);
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
