--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            this.resultComputed = false;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -169,6 +169,12 @@
         verifyInterval(min, max);
 
         double ret = Double.NaN;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
 
         double yMin = f.value(min);
         double yMax = f.value(max);
@@ -178,7 +184,6 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
@@ -258,7 +263,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
