--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,12 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
+        double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,27 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		double q = imaginary / real;
+		MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		MathUtils.checkNotNull(divisor);
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
