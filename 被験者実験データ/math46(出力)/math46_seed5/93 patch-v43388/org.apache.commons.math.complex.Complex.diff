--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,38 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,8 +323,51 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
