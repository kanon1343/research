--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +291,15 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        int sign = 0;
+		double q = imaginary / real;
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
@@ -426,7 +426,8 @@
             Double.isInfinite(imaginary) ||
             Double.isInfinite(factor.real) ||
             Double.isInfinite(factor.imaginary)) {
-            // we don't use isInfinite() to avoid testing for NaN again
+            double imaginary2 = 2.0 * imaginary;
+			// we don't use isInfinite() to avoid testing for NaN again
             return INF;
         }
         return createComplex(real * factor.real - imaginary * factor.imaginary,
