--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -125,7 +125,8 @@
             if (imaginary == 0.0) {
                 return FastMath.abs(real);
             }
-            double q = real / imaginary;
+            final List<Complex> result=new ArrayList<Complex>();
+			double q = real / imaginary;
             return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);
         } else {
             if (real == 0.0) {
@@ -256,8 +257,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double imaginary2 = 2.0 * imaginary;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -274,6 +274,24 @@
                 (imaginary * q - real) / denominator);
         } else {
             double q = d / c;
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
+			MathUtils.checkNotNull(divisor);
             double denominator = d * q + c;
             return createComplex((imaginary * q + real) / denominator,
                 (imaginary - real * q) / denominator);
@@ -293,8 +311,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -389,7 +406,8 @@
      * and neither part is {@code NaN}.
      */
     public boolean isInfinite() {
-        return isInfinite;
+        final List<Complex> result=new ArrayList<Complex>();
+		return isInfinite;
     }
 
     /**
