--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,8 +256,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (imaginary == 0.0) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -426,7 +423,8 @@
             Double.isInfinite(imaginary) ||
             Double.isInfinite(factor.real) ||
             Double.isInfinite(factor.imaginary)) {
-            // we don't use isInfinite() to avoid testing for NaN again
+            double imaginary2 = 2.0 * imaginary;
+			// we don't use isInfinite() to avoid testing for NaN again
             return INF;
         }
         return createComplex(real * factor.real - imaginary * factor.imaginary,
@@ -984,7 +982,9 @@
         }
 
         double real2 = 2.0 * real;
-        double imaginary2 = 2.0 * imaginary;
+        double q = imaginary / real;
+		int sign = 0;
+		double imaginary2 = 2.0 * imaginary;
         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
 
         return createComplex(FastMath.sin(real2) / d,
