--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -255,10 +255,8 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
-        }
+        if (divisor.isZero)
+			return NaN;
 
         if (divisor.isInfinite() && !isInfinite()) {
             return ZERO;
@@ -293,8 +291,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
+			double imaginary2 = 2.0 * imaginary;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -1180,6 +1179,7 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        double imaginary2 = 2.0 * imaginary;
+		return "(" + real + ", " + imaginary + ")";
     }
 }
