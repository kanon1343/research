--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -156,7 +156,6 @@
      * @throws NullArgumentException if {@code addend} is {@code null}.
      */
     public Complex add(Complex addend) throws NullArgumentException {
-        MathUtils.checkNotNull(addend);
         if (isNaN || addend.isNaN) {
             return NaN;
         }
@@ -256,8 +255,6 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -265,7 +262,8 @@
         }
 
         final double c = divisor.getReal();
-        final double d = divisor.getImaginary();
+        double real2 = 2.0 * real;
+		final double d = divisor.getImaginary();
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -289,12 +287,11 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -489,7 +486,6 @@
      */
     public Complex subtract(Complex subtrahend)
         throws NullArgumentException {
-        MathUtils.checkNotNull(subtrahend);
         if (isNaN || subtrahend.isNaN) {
             return NaN;
         }
@@ -1180,6 +1176,7 @@
     /** {@inheritDoc} */
     @Override
     public String toString() {
-        return "(" + real + ", " + imaginary + ")";
+        double imaginary2 = 2.0 * imaginary;
+		return "(" + real + ", " + imaginary + ")";
     }
 }
