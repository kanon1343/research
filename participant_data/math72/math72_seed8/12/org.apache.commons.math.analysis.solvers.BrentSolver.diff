--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +179,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.iterationCount = iterationCount;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -227,7 +225,23 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
-        double oldDelta = delta;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		double oldDelta = delta;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -238,13 +252,17 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+                delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				delta = x1 - x0;
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
                 setResult(x1, i);
+				this.f = f;
                 return result;
             }
             double dx = x2 - x1;
