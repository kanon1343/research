--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,7 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
+                    pingPong = 1 - pingPong;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -964,7 +964,6 @@
                     work[j + 2] = work[i] * tmp;
                     d *= tmp;
                 } else {
-                    work[j + 2] = work[i + 2] * (work[i] / work[j]);
                     d *= work[i + 2] / work[j];
                }
             }
@@ -1136,7 +1135,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    OpenMapRealVector res = new OpenMapRealVector(n);
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,14 +1383,13 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
+            int outIndex = 0;
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1404,7 +1402,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
