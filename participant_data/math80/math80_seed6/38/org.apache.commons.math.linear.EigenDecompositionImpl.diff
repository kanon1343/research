--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -845,7 +845,6 @@
         // initialize parameters used by goodStep
         tType = 0;
         dMin1 = 0;
-        dMin2 = 0;
         dN    = 0;
         dN1   = 0;
         dN2   = 0;
@@ -868,7 +867,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -957,7 +955,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -965,7 +962,6 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1136,12 +1132,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,7 +1377,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1396,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1738,6 +1729,11 @@
         // perfectly shifted tridiagonal matrix
         final int m = main.length;
         stationaryQuotientDifferenceWithShift(d, l, eigenvalue);
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
         progressiveQuotientDifferenceWithShift(d, l, eigenvalue);
 
         // select the twist index leading to
