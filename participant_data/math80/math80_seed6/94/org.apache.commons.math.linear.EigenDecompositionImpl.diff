--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1086,9 +1086,7 @@
                            (dMin1 > 0.0) &&
                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&
                            (Math.abs(dN) < TOLERANCE * sigma)) {
-                   // convergence hidden by negative DN.
-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
-                    dMin = 0.0;
+                   dMin = 0.0;
                     updateSigma(tau);
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
@@ -1136,8 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1738,6 +1734,28 @@
         // perfectly shifted tridiagonal matrix
         final int m = main.length;
         stationaryQuotientDifferenceWithShift(d, l, eigenvalue);
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
+		tType = -7;
         progressiveQuotientDifferenceWithShift(d, l, eigenvalue);
 
         // select the twist index leading to
