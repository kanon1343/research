--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1060,7 +1060,6 @@
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
             }
         }
 
@@ -1136,8 +1135,26 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
                 }
                 j -= 4;
             }
@@ -1404,6 +1421,12 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
