--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -965,7 +964,8 @@
                     d *= tmp;
                 } else {
                     work[j + 2] = work[i + 2] * (work[i] / work[j]);
-                    d *= work[i + 2] / work[j];
+                    tau = g * dMin;
+					d *= work[i + 2] / work[j];
                }
             }
             work[4 * n - 3 - pingPong] = d;
@@ -1136,8 +1136,34 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    tType = 0;
                     work[j - k] = tmp;
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					initialSplits(n);
+					dMin = 0.0;
+					initialSplits(n);
                 }
                 j -= 4;
             }
@@ -1404,6 +1430,15 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
+			j4p2 = j4 + 2 * pingPong - 1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
