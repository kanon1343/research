--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -955,9 +954,41 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
+					++k;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					cachedV.setEntry(k, k, 1);
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					++k;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
+					lowerSpectra = Double.POSITIVE_INFINITY;
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1167,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
