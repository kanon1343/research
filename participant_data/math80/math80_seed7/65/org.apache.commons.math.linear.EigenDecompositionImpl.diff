--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -836,9 +836,6 @@
             return;
         }
 
-        // initial checks for splits (see Parlett & Marques section 3.3)
-        flipIfWarranted(n, 2);
-
         // two iterations with Li's test for initial splits
         initialSplits(n);
 
@@ -941,7 +938,8 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
+                    double beta = 0;
+					work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -955,6 +953,32 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
+					dMin2 = 0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1053,9 +1077,7 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
+                tType = -2;
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
