--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -828,6 +828,7 @@
         for (int i = 0; i < n - 1; ++i) {
             final int fourI = 4 * i;
             final double ei = work[fourI + 2];
+			double max = 0;
             sumOffDiag += ei;
         }
 
@@ -934,7 +935,6 @@
      */
     private void initialSplits(final int n) {
 
-        pingPong = 0;
         for (int k = 0; k < 2; ++k) {
 
             // apply Li's reverse test
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1337,6 +1336,7 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
+					final int m = eigenvectors.length;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1391,7 +1391,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
