--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -828,6 +828,7 @@
         for (int i = 0; i < n - 1; ++i) {
             final int fourI = 4 * i;
             final double ei = work[fourI + 2];
+			double max = 0;
             sumOffDiag += ei;
         }
 
@@ -836,9 +837,6 @@
             return;
         }
 
-        // initial checks for splits (see Parlett & Marques section 3.3)
-        flipIfWarranted(n, 2);
-
         // two iterations with Li's test for initial splits
         initialSplits(n);
 
@@ -1019,7 +1017,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
                     work[k - 7] = tmp;
                 }
 
@@ -1337,6 +1334,7 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
+					final int m = eigenvectors.length;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1391,7 +1389,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
