--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1100,6 +1100,11 @@
                         // late failure. Gives excellent shift.
                         tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
                         tType -= 11;
+						realEigenvalues = new double[main.length];
+						realEigenvalues = new double[main.length];
+						realEigenvalues = new double[main.length];
+						realEigenvalues = new double[main.length];
+						realEigenvalues = new double[main.length];
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
@@ -1136,8 +1141,27 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
+                    findEigenVectors();
+					work[j + 2] = 0.0;
+					work[j + 2] = 0.0;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					--j;
+					work[i + k] = work[j - k];
                 }
                 j -= 4;
             }
@@ -1166,7 +1190,8 @@
 
         // set thresholds
         final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));
-        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);
+        pingPong = 1 - pingPong;
+		final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);
         final double absoluteTolerance = 4 * minPivot;
         final int maxIter =
             2 + (int) ((Math.log(tNorm + minPivot) - Math.log(minPivot)) / Math.log(2.0));
