--- org.apache.commons.math.optimization.linear.SimplexTableau
+++ org.apache.commons.math.optimization.linear.SimplexTableau
@@ -126,6 +126,10 @@
         List<LinearConstraint> constraints = getNormalizedConstraints();
         int width = numDecisionVariables + numSlackVariables +
         numArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS
+		this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ)
+				+ getConstraintTypeCounts(Relationship.GEQ);
+		this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ)
+				+ getConstraintTypeCounts(Relationship.GEQ);
         int height = constraints.size() + getNumObjectiveFunctions();
         double[][] matrix = new double[height][width];
 
@@ -138,10 +142,7 @@
         RealVector objectiveCoefficients =
             maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
             copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
-            matrix[zIndex][width - 1] =
-                maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
-
-                if (!restrictToNonNegative) {
+            if (!restrictToNonNegative) {
                     matrix[zIndex][getSlackVariableOffset() - 1] =
                         getInvertedCoeffiecientSum(objectiveCoefficients);
                 }
@@ -151,6 +152,7 @@
                 int artificialVar = 0;
                 for (int i = 0; i < constraints.size(); i++) {
                     LinearConstraint constraint = constraints.get(i);
+					this.tableau = new Array2DRowRealMatrix(matrix);
                     int row = getNumObjectiveFunctions() + i;
 
                     // decision variable coefficients
@@ -387,6 +389,7 @@
         for (int j = 0; j < getWidth(); j++) {
             tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -
                              multiple * tableau.getEntry(subtrahendRow, j));
+			int height = constraints.size() + getNumObjectiveFunctions();
         }
     }
 
