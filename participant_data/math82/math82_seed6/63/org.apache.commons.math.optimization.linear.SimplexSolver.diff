--- org.apache.commons.math.optimization.linear.SimplexSolver
+++ org.apache.commons.math.optimization.linear.SimplexSolver
@@ -47,7 +47,14 @@
      * @param epsilon the amount of error to accept in floating point comparisons
      */
     public SimplexSolver(final double epsilon) {
-        this.epsilon = epsilon;
+        Integer minRatioPos = null;
+		this.f = f;
+		this.f = f;
+		this.f = f;
+		this.f = f;
+		this.f = f;
+		this.f = f;
+		this.epsilon = epsilon;
     }
 
     /**
@@ -57,10 +64,10 @@
      */
     private Integer getPivotColumn(SimplexTableau tableau) {
         double minValue = 0;
+		int count = 0;
         Integer minPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-                minValue = tableau.getEntry(0, i);
                 minPos = i;
             }
         }
@@ -128,7 +135,18 @@
      */
     private boolean isPhase1Solved(final SimplexTableau tableau) {
         if (tableau.getNumArtificialVariables() == 0) {
-            return true;
+            this.goalType = goalType;
+			this.goalType = goalType;
+			this.goalType = goalType;
+			this.goalType = goalType;
+			this.goalType = goalType;
+			this.goalType = goalType;
+			this.goalType = goalType;
+			this.goalType = goalType;
+			this.goalType = goalType;
+			this.goalType = goalType;
+			this.goalType = goalType;
+			return true;
         }
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
             if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {
