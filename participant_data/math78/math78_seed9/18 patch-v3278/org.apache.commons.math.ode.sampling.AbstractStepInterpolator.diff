--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -91,12 +91,11 @@
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
+	interpolatedState = null;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -217,6 +216,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	this.dirtyState = true;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          this.forward = forward;
           dirtyState = false;
       }
 
@@ -287,7 +287,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          this.forward = forward;
           dirtyState = false;
       }
 
