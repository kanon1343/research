--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
-    interpolatedState       = null;
-    interpolatedDerivatives = null;
+    finalized = false;
+	interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
   }
 
   /** Simple constructor.
@@ -109,11 +107,21 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
+	interpolatedState = null;
 
     finalized         = false;
     this.forward      = forward;
@@ -171,8 +179,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -218,8 +224,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -269,9 +273,10 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (currentState == null) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+		dirtyState = true;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
@@ -284,7 +289,7 @@
   public double[] getInterpolatedDerivatives() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (currentState == null) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
