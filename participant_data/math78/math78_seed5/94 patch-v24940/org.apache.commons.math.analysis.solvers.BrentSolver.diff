--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					++i;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -297,7 +294,9 @@
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
-            y1 = f.value(x1);
+            oldDelta = delta;
+			oldDelta = delta;
+			y1 = f.value(x1);
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
