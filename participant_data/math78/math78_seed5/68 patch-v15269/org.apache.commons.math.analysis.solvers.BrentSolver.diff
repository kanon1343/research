--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
@@ -297,7 +296,14 @@
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
-            y1 = f.value(x1);
+            oldDelta = delta;
+			oldDelta = delta;
+			oldDelta = delta;
+			oldDelta = delta;
+			oldDelta = delta;
+			oldDelta = delta;
+			oldDelta = delta;
+			y1 = f.value(x1);
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
