--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,10 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    dirtyState = false;
+	dirtyState = false;
+	dirtyState = false;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -113,7 +116,14 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
@@ -208,7 +218,9 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    dirtyState = true;
+	dirtyState = true;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,6 +255,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	finalized = false;
+	finalized = false;
       dirtyState       = true;
   }
 
@@ -271,7 +285,20 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+          this.forward = true;
+		final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
+		h = Double.NaN;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
