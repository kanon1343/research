--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -228,6 +228,9 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
@@ -276,10 +279,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    x2 = x0;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
