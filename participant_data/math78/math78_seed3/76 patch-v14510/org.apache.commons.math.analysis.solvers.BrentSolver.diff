--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,14 +272,16 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    {
+						delta = (x0 - x1) / (1 - y0 / y1);
+						if (delta / oldDelta > 1) {
+							delta = 0.5 * oldDelta;
+						}
+					}
+					p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -291,7 +293,8 @@
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
-                x1 = x1 + delta;
+                this.resultComputed = true;
+				x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
