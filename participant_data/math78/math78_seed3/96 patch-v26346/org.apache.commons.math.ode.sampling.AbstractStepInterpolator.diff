--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,13 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -108,10 +106,65 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    h = Double.NaN;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
+	h = Double.NaN;
+	h = Double.NaN;
+	h = Double.NaN;
+	h = Double.NaN;
+	h = Double.NaN;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
+	interpolatedDerivatives = null;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
+	h = Double.NaN;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
+	h = Double.NaN;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -243,7 +296,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -272,7 +324,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
