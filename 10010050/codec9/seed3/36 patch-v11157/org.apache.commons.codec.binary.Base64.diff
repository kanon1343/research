--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,13 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +953,7 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
         return buf;
     }
 
@@ -975,13 +977,8 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
-            boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
-            }
-        }
+        if (chunkSize > 0)
+			len += (len / chunkSize) * chunkSeparator.length;
         return len;
     }
 
@@ -1052,7 +1049,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
