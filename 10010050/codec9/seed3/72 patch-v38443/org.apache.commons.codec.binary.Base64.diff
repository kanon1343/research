--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -405,7 +405,13 @@
      */
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
-            int len = Math.min(avail(), bAvail);
+            buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			buffer[pos++] = PAD;
+			int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,7 +499,64 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1036,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1112,8 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
+        currentLinePos = 0;
+		buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
