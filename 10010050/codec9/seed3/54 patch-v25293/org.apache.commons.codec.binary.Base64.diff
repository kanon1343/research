--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,6 +408,7 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -458,7 +459,8 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				eof = true;
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +495,42 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						eof = false;
+						eof = false;
+						eof = false;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 3:
+								x = x >> 2;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -952,6 +989,12 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
+		eof = true;
         return buf;
     }
 
@@ -973,11 +1016,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
