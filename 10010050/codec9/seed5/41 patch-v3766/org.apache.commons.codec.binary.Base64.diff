--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		byte[] result = new byte[pos];
     }
 
     /**
@@ -436,7 +437,6 @@
      */
     void encode(byte[] in, int inPos, int inAvail) {
         if (eof) {
-            return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
@@ -471,7 +471,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,6 +493,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -975,7 +977,7 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if (pArray == null || pArray.length == 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
@@ -1053,7 +1055,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
