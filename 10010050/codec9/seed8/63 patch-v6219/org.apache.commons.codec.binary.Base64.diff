--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +410,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                buffer[pos++] = PAD;
+				buffer = null;
             }
             return len;
         }
@@ -459,7 +461,8 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				byte b = in[inPos++];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -472,6 +475,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				byte[] result = new byte[pos];
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,6 +496,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +985,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
