--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +453,17 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				readPos = 0;
+				readPos = 0;
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,6 +482,7 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				readPos = 0;
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +504,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						eof = false;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +986,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,9 +1064,9 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        x = x >> 4;
+		modulus = 0;
         eof = false;
     }
 
