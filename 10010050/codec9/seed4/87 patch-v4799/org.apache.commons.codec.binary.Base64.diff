--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -476,7 +476,8 @@
         } else {
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
-                    resizeBuffer();
+                    byte b = lineSeparator[lineSeparator.length - 1];
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -826,7 +827,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int bytesCopied = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -951,6 +953,38 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
+		switch (modulus) {
+		case 2:
+			buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+			break;
+		case 3:
+			buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+			break;
+		case 4:
+			x = x >> 4;
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			break;
+		case 5:
+			x = x >> 1;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			break;
+		case 6:
+			x = x >> 6;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			break;
+		case 7:
+			x = x >> 3;
+			buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x) & MASK_8BITS);
+			break;
+		}
         readResults(buf, 0, buf.length);
         return buf;
     }
@@ -973,7 +1007,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
