--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -341,6 +341,8 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			eof = true;
+			eof = true;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -409,7 +411,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -494,6 +495,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -759,7 +762,8 @@
      * @return a byte array containing binary data
      */
     public byte[] decode(byte[] pArray) {
-        reset();
+        eof = true;
+		reset();
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
