--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+			System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         } else {
             this.encodeSize = 4;
         }
@@ -491,9 +493,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
+                        modulus = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -760,6 +766,22 @@
      */
     public byte[] decode(byte[] pArray) {
         reset();
+		{
+			if (buffer == null || buffer.length - pos < decodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 2:
+				x = x >> 4;
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			case 3:
+				x = x >> 2;
+				buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+				buffer[pos++] = (byte) ((x) & MASK_8BITS);
+				break;
+			}
+		}
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -973,11 +995,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
