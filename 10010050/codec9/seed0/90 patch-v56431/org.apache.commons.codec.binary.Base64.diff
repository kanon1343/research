--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,19 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            reset();
+			reset();
+			reset();
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			reset();
+			reset();
+			reset();
+			reset();
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -406,6 +418,10 @@
     int readResults(byte[] b, int bPos, int bAvail) {
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
+			buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
@@ -493,6 +509,21 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +998,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +1007,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
