--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,18 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            pos = 0;
+			lineLength = 0;  // disable chunk-separating
+			eof = true;
+			resizeBuffer();
+			resizeBuffer();
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			resizeBuffer();
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -343,8 +353,14 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		lineSeparator = CHUNK_SEPARATOR;
         if (containsBase64Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -383,6 +399,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
