--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -957,7 +956,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,12 +1134,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,6 +1380,18 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
+			{
+				work[j4] = 0.0;
+				d = work[j4 + 1];
+				dMin = d;
+				eMin = 0.0;
+			}
+			{
+				work[j4] = 0.0;
+				d = work[j4 + 1];
+				dMin = d;
+				eMin = 0.0;
+			}
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1391,7 +1399,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1411,7 +1418,6 @@
             work[j4] = work[j4p2] * tmp;
             dN = dN1 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
