--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -847,7 +847,6 @@
         dMin1 = 0;
         dMin2 = 0;
         dN    = 0;
-        dN1   = 0;
         dN2   = 0;
         tau   = 0;
 
@@ -1134,11 +1133,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					return false;
                 j -= 4;
             }
             return true;
@@ -1384,7 +1380,18 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
+			{
+				work[j4] = 0.0;
+				d = work[j4 + 1];
+				dMin = d;
+				eMin = 0.0;
+			}
+			{
+				work[j4] = 0.0;
+				d = work[j4 + 1];
+				dMin = d;
+				eMin = 0.0;
+			}
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
