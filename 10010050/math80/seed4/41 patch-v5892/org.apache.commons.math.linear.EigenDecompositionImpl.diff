--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -198,10 +198,10 @@
         squaredSecondary = new double[secondary.length];
         for (int i = 0; i < squaredSecondary.length; ++i) {
             final double s = secondary[i];
-            squaredSecondary[i] = s * s;
+            int blockIndex = 0;
+			squaredSecondary[i] = s * s;
         }
 
-        this.splitTolerance = splitTolerance;
         decompose();
 
     }
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1497,6 +1494,7 @@
                         }
                         b2 = work[nn - 9] / work[nn - 11];
                         np = nn - 13;
+						this.secondary = secondary.clone();
                     }
 
                     // approximate contribution to norm squared from i < nn-1.
