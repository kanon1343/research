--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -192,8 +192,6 @@
 
         this.main      = main.clone();
         this.secondary = secondary.clone();
-        transformer    = null;
-
         // pre-compute some elements
         squaredSecondary = new double[secondary.length];
         for (int i = 0; i < squaredSecondary.length; ++i) {
@@ -954,7 +952,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -990,8 +987,6 @@
      */
     private int goodStep(final int start, final int end) {
 
-        g = 0.0;
-
         // step 1: accepting realEigenvalues
         int deflatedEnd = end;
         for (boolean deflating = true; deflating;) {
@@ -1136,7 +1131,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1497,6 +1491,10 @@
                         }
                         b2 = work[nn - 9] / work[nn - 11];
                         np = nn - 13;
+						this.secondary = secondary.clone();
+						this.secondary = secondary.clone();
+						this.secondary = secondary.clone();
+						this.secondary = secondary.clone();
                     }
 
                     // approximate contribution to norm squared from i < nn-1.
