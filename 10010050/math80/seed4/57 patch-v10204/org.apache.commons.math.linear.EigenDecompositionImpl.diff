--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -878,8 +878,6 @@
                 diagMax    = Math.max(diagMax, work[i] + work[i + 2]);
                 offDiagMin = Math.min(offDiagMin, work[i + 2]);
             }
-            work[4 * n0 - 2] = offDiagMin;
-
             // lower bound of Gershgorin disk
             dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));
 
@@ -941,8 +939,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -954,7 +950,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1052,7 +1047,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1134,11 +1128,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					break;
                 j -= 4;
             }
             return true;
@@ -1497,6 +1488,10 @@
                         }
                         b2 = work[nn - 9] / work[nn - 11];
                         np = nn - 13;
+						this.secondary = secondary.clone();
+						this.secondary = secondary.clone();
+						this.secondary = secondary.clone();
+						this.secondary = secondary.clone();
                     }
 
                     // approximate contribution to norm squared from i < nn-1.
@@ -1510,7 +1505,7 @@
                             return;
                         }
                         b2 = b2 * (work[i4] / work[i4 - 2]);
-                        a2 = a2 + b2;
+                        dN1 = 0;
                         if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
                             break;
                         }
