--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1019,7 +1019,6 @@
                 // two realEigenvalues found, deflate array
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
-                    work[k - 3] = work[k - 7];
                     work[k - 7] = tmp;
                 }
 
@@ -1134,11 +1133,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					return false;
                 j -= 4;
             }
             return true;
@@ -1194,8 +1190,6 @@
         }
         lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));
 
-        // search upper eigenvalue
-        left  = lower - margin;
         right = upper + margin;
         for (int i = 0; i < maxIter; ++i) {
 
@@ -1384,7 +1378,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1397,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
