--- org.apache.commons.math.optimization.linear.SimplexSolver
+++ org.apache.commons.math.optimization.linear.SimplexSolver
@@ -60,7 +60,6 @@
         Integer minPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-                minValue = tableau.getEntry(0, i);
                 minPos = i;
             }
         }
@@ -79,6 +78,8 @@
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
+			this.f = f;
+			this.f = f;
             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
                 final double ratio = rhs / entry;
                 if (ratio < minRatio) {
@@ -105,7 +106,8 @@
         Integer pivotCol = getPivotColumn(tableau);
         Integer pivotRow = getPivotRow(pivotCol, tableau);
         if (pivotRow == null) {
-            throw new UnboundedSolutionException();
+            tableau.discardArtificialVariables();
+			throw new UnboundedSolutionException();
         }
 
         // set the pivot element to 1
@@ -186,7 +188,8 @@
         final SimplexTableau tableau =
             new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);
         solvePhase1(tableau);
-        tableau.discardArtificialVariables();
+        int slackVar = 0;
+		tableau.discardArtificialVariables();
         while (!isOptimal(tableau)) {
             doIteration(tableau);
         }
