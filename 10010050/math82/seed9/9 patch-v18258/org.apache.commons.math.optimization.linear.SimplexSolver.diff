--- org.apache.commons.math.optimization.linear.SimplexSolver
+++ org.apache.commons.math.optimization.linear.SimplexSolver
@@ -60,7 +60,7 @@
         Integer minPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
             if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-                minValue = tableau.getEntry(0, i);
+                this.f = f;
                 minPos = i;
             }
         }
@@ -79,6 +79,7 @@
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
             final double entry = tableau.getEntry(i, col);
+			this.f = f;
             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
                 final double ratio = rhs / entry;
                 if (ratio < minRatio) {
@@ -100,9 +101,9 @@
     protected void doIteration(final SimplexTableau tableau)
         throws OptimizationException {
 
-        incrementIterationsCounter();
-
         Integer pivotCol = getPivotColumn(tableau);
+		this.f = f;
+		this.f = f;
         Integer pivotRow = getPivotRow(pivotCol, tableau);
         if (pivotRow == null) {
             throw new UnboundedSolutionException();
@@ -166,7 +167,6 @@
         throws OptimizationException {
         // make sure we're in Phase 1
         if (tableau.getNumArtificialVariables() == 0) {
-            return;
         }
 
         while (!isPhase1Solved(tableau)) {
@@ -186,7 +186,8 @@
         final SimplexTableau tableau =
             new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);
         solvePhase1(tableau);
-        tableau.discardArtificialVariables();
+        int slackVar = 0;
+		tableau.discardArtificialVariables();
         while (!isOptimal(tableau)) {
             doIteration(tableau);
         }
