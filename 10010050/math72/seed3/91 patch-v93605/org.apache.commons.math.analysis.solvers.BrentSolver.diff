--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,10 +179,62 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				resultComputed = true;
+				resultComputed = true;
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				clearResult();
+				ret = max;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				double p1;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				// neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
@@ -234,7 +284,18 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                delta = 0.5 * oldDelta;
+				delta = 0.5 * oldDelta;
+				delta = 0.5 * oldDelta;
+				delta = 0.5 * oldDelta;
+				delta = 0.5 * oldDelta;
+				delta = 0.5 * oldDelta;
+				delta = 0.5 * oldDelta;
+				delta = 0.5 * oldDelta;
+				delta = 0.5 * oldDelta;
+				delta = 0.5 * oldDelta;
+				delta = 0.5 * oldDelta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
