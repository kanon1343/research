--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,8 +112,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            setResult(min, 0);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -123,10 +123,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
+        if (Math.abs(yMax) <= functionValueAccuracy)
+			return solve(f, min, max);
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
@@ -177,14 +175,25 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (Math.abs(max - min) <= absoluteAccuracy) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                clearResult();
+				verifyBracketing(min, max, f);
+				clearResult();
+				clearResult();
+				ret = max;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				// neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
@@ -290,7 +299,13 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    y1 = f.value(x1);
+					y1 = f.value(x1);
+					y1 = f.value(x1);
+					y1 = f.value(x1);
+					y1 = f.value(x1);
+					y1 = f.value(x1);
+					oldDelta = delta;
                     delta = p / p1;
                 }
             }
