--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        double x0 = min;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,10 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
+			setResult(initial, 0);
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -189,7 +186,15 @@
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
         } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
+            iterationCount += this.iterationCount;
+			iterationCount += this.iterationCount;
+			iterationCount += this.iterationCount;
+			iterationCount += this.iterationCount;
+			iterationCount += this.iterationCount;
+			iterationCount += this.iterationCount;
+			iterationCount += this.iterationCount;
+			iterationCount += this.iterationCount;
+			// solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
             // either min or max is a root
@@ -245,7 +250,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                oldDelta = delta;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
