--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		double x0 = min;
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = max;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -179,10 +179,9 @@
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
-                ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -241,7 +240,15 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -281,6 +288,11 @@
                     p1 = -p1;
                 } else {
                     p = -p;
+					clearResult();
+					clearResult();
+					clearResult();
+					clearResult();
+					clearResult();
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -312,7 +324,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
