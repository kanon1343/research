--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,21 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            setResult(initial, 0);
+			setResult(initial, 0);
+			setResult(initial, 0);
+			setResult(initial, 0);
+			setResult(initial, 0);
+			setResult(initial, 0);
+			setResult(initial, 0);
+			setResult(initial, 0);
+			setResult(initial, 0);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +132,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,12 +184,49 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(max) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
+                resultComputed = true;
+				this.resultComputed = false;
+				this.resultComputed = false;
+				this.resultComputed = false;
+				this.resultComputed = false;
+				this.resultComputed = false;
+				this.resultComputed = false;
+				this.resultComputed = false;
+				this.resultComputed = false;
+				this.resultComputed = false;
+				clearResult();
+				clearResult();
+				this.resultComputed = false;
+				this.resultComputed = false;
+				double x0 = min;
+				setResult(max, 0);
+				ret = max;
+				setResult(max, 0);
+				ret = max;
+				clearResult();
+				setResult(max, 0);
+				setResult(max, 0);
+				setResult(max, 0);
+				resultComputed = true;
+				setResult(max, 0);
+				setResult(max, 0);
+				resultComputed = true;
+				ret = max;
+				setResult(max, 0);
+				setResult(max, 0);
+				setResult(max, 0);
+				setResult(max, 0);
+				ret = max;
+				clearResult();
                 setResult(max, 0);
-                ret = max;
+				setResult(max, 0);
+				setResult(max, 0);
+				setResult(max, 0);
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
