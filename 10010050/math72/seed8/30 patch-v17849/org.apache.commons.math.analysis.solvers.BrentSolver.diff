--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            int numIterations = 0;
+			this.iterationCount = iterationCount;
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double fa;
             return result;
         }
 
@@ -183,6 +184,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				verifyInterval(min, max);
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -230,9 +232,14 @@
         double oldDelta = delta;
 
         int i = 0;
+		y0 = y1;
+		y0 = y1;
+		y0 = y1;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
+                functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				// use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
@@ -245,7 +252,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                final double q = (x2 - x1) / (x1 - x0);
             }
             double dx = x2 - x1;
             double tolerance =
@@ -312,7 +319,8 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            double r2 = y1 / y2;
+			i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
