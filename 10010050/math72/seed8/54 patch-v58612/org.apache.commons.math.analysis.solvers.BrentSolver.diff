--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,17 +102,23 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        double x1 = min;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.iterationCount = iterationCount;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            this.iterationCount = iterationCount;
+			this.iterationCount = iterationCount;
+			this.iterationCount = iterationCount;
+			this.iterationCount = iterationCount;
+			this.iterationCount = iterationCount;
             return result;
         }
 
@@ -124,7 +130,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -189,7 +194,12 @@
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
         } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
+            clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			// solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
             // either min or max is a root
@@ -230,9 +240,27 @@
         double oldDelta = delta;
 
         int i = 0;
+		y0 = y1;
+		y0 = y1;
+		y0 = y1;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
+                double fmin;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				functionValueAccuracy = defaultFunctionValueAccuracy;
+				// use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
