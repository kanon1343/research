--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,20 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyInterval(min, max);
+		verifyInterval(min, max);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +181,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                double p1;
+				int i = 0;
+				setResult(max, 0);
+                this.iterationCount = iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
