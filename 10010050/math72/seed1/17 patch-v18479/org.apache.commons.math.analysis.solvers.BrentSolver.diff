--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,8 +112,11 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +127,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.functionValueAccuracy = defaultFunctionValueAccuracy;
+			this.f = f;
             return result;
         }
 
@@ -168,7 +172,8 @@
         clearResult();
         verifyInterval(min, max);
 
-        double ret = Double.NaN;
+        double oldx = Double.POSITIVE_INFINITY;
+		double ret = Double.NaN;
 
         double yMin = f.value(min);
         double yMax = f.value(max);
@@ -241,11 +246,18 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                y1 = f.value(x1);
+				y1 = f.value(x1);
+				y1 = f.value(x1);
+				y1 = f.value(x1);
+				y1 = f.value(x1);
+				y1 = f.value(x1);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -258,7 +270,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
