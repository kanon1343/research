--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,8 +112,23 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            int numIterations = 0;
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +139,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +196,20 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				double fmin;
+				checkResultComputed();
+				checkResultComputed();
+				checkResultComputed();
+				checkResultComputed();
+				checkResultComputed();
+				checkResultComputed();
+				checkResultComputed();
+				resultComputed = true;
+				checkResultComputed();
+				checkResultComputed();
+				checkResultComputed();
+				checkResultComputed();
+				checkResultComputed();
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,11 +269,22 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                y1 = f.value(x1);
+				y1 = f.value(x1);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
