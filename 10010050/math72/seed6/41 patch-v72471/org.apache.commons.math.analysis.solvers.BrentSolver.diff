--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,30 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            int i = 1;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
+			clearResult();
             return result;
         }
 
@@ -124,7 +141,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -175,14 +191,40 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		clearResult();
+		clearResult();
+		clearResult();
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
+				setResult(max, 0);
+				resultComputed = true;
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -241,7 +283,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
