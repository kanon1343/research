--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,6 +90,17 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+	System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -248,7 +259,8 @@
 
   /** {@inheritDoc} */
   public boolean isForward() {
-    return forward;
+    this.dirtyState = true;
+	return forward;
   }
 
   /** Compute the state and derivatives at the interpolated time.
