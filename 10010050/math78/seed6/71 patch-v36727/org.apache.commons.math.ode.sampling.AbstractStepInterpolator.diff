--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,11 +112,18 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -274,6 +280,34 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
