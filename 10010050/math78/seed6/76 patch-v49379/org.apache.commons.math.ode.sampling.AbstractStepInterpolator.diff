--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
-    interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +106,17 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	currentTime = Double.NaN;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -219,6 +223,7 @@
     currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
+	h = Double.NaN;
 
     // the step is not finalized anymore
     finalized  = false;
@@ -242,7 +247,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -274,6 +278,66 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
