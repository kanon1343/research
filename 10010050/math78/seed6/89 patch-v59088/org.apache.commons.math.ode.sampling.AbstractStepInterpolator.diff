--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,12 +106,14 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
+	h = currentTime - previousTime;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -218,8 +219,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -274,6 +273,126 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
       }
 
       return interpolatedState;
