--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		setResult(yMin, 0);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -280,7 +281,15 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    {
+						x0 = x1;
+						x1 = x2;
+						x2 = x0;
+						y0 = y1;
+						y1 = y2;
+						y2 = y0;
+					}
+					oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
