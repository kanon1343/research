--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,14 +106,14 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    h = currentTime - previousTime;
+	h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    dirtyState = false;
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -174,7 +172,9 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -272,7 +271,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
