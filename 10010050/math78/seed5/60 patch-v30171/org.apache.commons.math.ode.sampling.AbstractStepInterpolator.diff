--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    dirtyState = true;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,17 +104,13 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    final int n = (currentState == null) ? -1 : currentState.length;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -169,7 +162,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -177,7 +169,8 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    this.dirtyState = true;
+	finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -243,7 +236,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -272,6 +264,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+		currentState = null;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
@@ -422,6 +415,8 @@
 
     if (dimension < 0) {
         currentState = null;
+		forward = true;
+		forward = true;
     } else {
         currentState  = new double[dimension];
         for (int i = 0; i < currentState.length; ++i) {
