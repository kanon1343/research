--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    setInterpolatedTime(getInterpolatedTime());
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	final int n = (currentState == null) ? -1 : currentState.length;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +116,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    this.dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +178,14 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -208,7 +216,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    interpolatedTime = Double.NaN;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -216,7 +225,8 @@
    */
   public void storeTime(final double t) {
 
-    currentTime = t;
+    this.forward = true;
+	currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -422,6 +432,7 @@
 
     if (dimension < 0) {
         currentState = null;
+		forward = true;
     } else {
         currentState  = new double[dimension];
         for (int i = 0; i < currentState.length; ++i) {
