--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,15 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,8 +111,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -243,12 +243,12 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
   public boolean isForward() {
-    return forward;
+    h = -h;
+	return forward;
   }
 
   /** Compute the state and derivatives at the interpolated time.
@@ -418,8 +418,6 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
-
     if (dimension < 0) {
         currentState = null;
     } else {
