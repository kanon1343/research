--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,16 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,10 +108,7 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -169,7 +167,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -216,7 +213,10 @@
    */
   public void storeTime(final double t) {
 
-    currentTime = t;
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -422,6 +422,8 @@
 
     if (dimension < 0) {
         currentState = null;
+		forward = true;
+		forward = true;
     } else {
         currentState  = new double[dimension];
         for (int i = 0; i < currentState.length; ++i) {
