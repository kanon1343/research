--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    setInterpolatedTime(getInterpolatedTime());
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,15 +104,14 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
-    h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
+    setInterpolatedTime(getInterpolatedTime());
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    final int n = (currentState == null) ? -1 : currentState.length;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    this.dirtyState = true;
+	this.dirtyState = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +173,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    final int n = (currentState == null) ? -1 : currentState.length;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -220,7 +216,9 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
+    this.dirtyState = true;
+	this.dirtyState = true;
+	// the step is not finalized anymore
     finalized  = false;
 
   }
@@ -422,6 +420,7 @@
 
     if (dimension < 0) {
         currentState = null;
+		forward = true;
     } else {
         currentState  = new double[dimension];
         for (int i = 0; i < currentState.length; ++i) {
