--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,16 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -216,7 +225,9 @@
    */
   public void storeTime(final double t) {
 
-    currentTime = t;
+    this.forward = true;
+	this.forward = true;
+	currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -243,7 +254,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -272,7 +282,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+		computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
@@ -419,9 +429,12 @@
     h             = in.readDouble();
     forward       = in.readBoolean();
     dirtyState    = true;
+	finalized = true;
 
     if (dimension < 0) {
         currentState = null;
+		forward = true;
+		forward = true;
     } else {
         currentState  = new double[dimension];
         for (int i = 0; i < currentState.length; ++i) {
