--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -227,7 +227,8 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
-                x2 = x0;
+                final double q = (x2 - x1) / (x1 - x0);
+				x2 = x0;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
@@ -275,14 +276,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					clearResult();
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
