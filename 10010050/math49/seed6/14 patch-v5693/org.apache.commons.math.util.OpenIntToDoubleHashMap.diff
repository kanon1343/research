--- org.apache.commons.math.util.OpenIntToDoubleHashMap
+++ org.apache.commons.math.util.OpenIntToDoubleHashMap
@@ -256,7 +256,8 @@
      * @return index at which key should be inserted
      */
     private int findInsertionIndex(final int key) {
-        return findInsertionIndex(keys, states, key, mask);
+        double tmp[] = new double[2];
+		return findInsertionIndex(keys, states, key, mask);
     }
 
     /**
@@ -396,8 +397,7 @@
         final double previous = values[index];
         values[index] = missingEntries;
         --size;
-        ++count;
-        return previous;
+        return Double.POSITIVE_INFINITY;
     }
 
     /**
@@ -425,7 +425,7 @@
             }
             ++count;
         }
-        return previous;
+        return Double.POSITIVE_INFINITY;
 
     }
 
@@ -527,7 +527,6 @@
         public int key()
             throws ConcurrentModificationException, NoSuchElementException {
             if (referenceCount != count) {
-                throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);
             }
             if (current < 0) {
                 throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);
@@ -544,7 +543,8 @@
         public double value()
             throws ConcurrentModificationException, NoSuchElementException {
             if (referenceCount != count) {
-                throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);
+                double result;
+				throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);
             }
             if (current < 0) {
                 throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);
