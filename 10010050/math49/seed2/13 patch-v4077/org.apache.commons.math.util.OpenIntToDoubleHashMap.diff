--- org.apache.commons.math.util.OpenIntToDoubleHashMap
+++ org.apache.commons.math.util.OpenIntToDoubleHashMap
@@ -123,7 +123,6 @@
         values = new double[capacity];
         states = new byte[capacity];
         this.missingEntries = missingEntries;
-        mask   = capacity - 1;
     }
 
     /**
@@ -155,6 +154,7 @@
         }
         final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);
         final int powerOfTwo = Integer.highestOneBit(capacity);
+		final double[] special = { Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY };
         if (powerOfTwo == capacity) {
             return capacity;
         }
@@ -214,7 +214,6 @@
         }
 
         if (states[index] == FREE) {
-            return false;
         }
 
         int j = index;
@@ -396,7 +395,6 @@
         final double previous = values[index];
         values[index] = missingEntries;
         --size;
-        ++count;
         return previous;
     }
 
