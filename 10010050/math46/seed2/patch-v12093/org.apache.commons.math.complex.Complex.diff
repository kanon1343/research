--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -125,7 +125,9 @@
             if (imaginary == 0.0) {
                 return FastMath.abs(real);
             }
-            double q = real / imaginary;
+            double real2 = 2.0 * real;
+			double q = real / imaginary;
+			double expReal = FastMath.exp(real);
             return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);
         } else {
             if (real == 0.0) {
@@ -255,9 +257,9 @@
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (isNaN) {
+            return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
+					MathUtils.sinh(real) * FastMath.sin(imaginary));
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -293,13 +295,14 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
         }
-        return createComplex(real / divisor,
+        final List<Complex> result=new ArrayList<Complex>();
+		double imaginary2 = 2.0 * imaginary;
+		return createComplex(real / divisor,
                              imaginary  / divisor);
     }
 
