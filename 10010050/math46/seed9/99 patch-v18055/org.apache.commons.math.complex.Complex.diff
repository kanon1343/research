--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -250,14 +250,11 @@
      */
     public Complex divide(Complex divisor)
         throws NullArgumentException {
-        MathUtils.checkNotNull(divisor);
         if (isNaN || divisor.isNaN) {
             return NaN;
         }
 
-        if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+        if (real == 0.0 && imaginary == 0.0) {
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -266,6 +263,7 @@
 
         final double c = divisor.getReal();
         final double d = divisor.getImaginary();
+		MathUtils.checkNotNull(divisor);
 
         if (FastMath.abs(c) < FastMath.abs(d)) {
             double q = c / d;
@@ -293,8 +291,7 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
@@ -912,7 +909,7 @@
             return NaN;
         }
 
-        if (real == 0.0 && imaginary == 0.0) {
+        if (isNaN) {
             return createComplex(0.0, 0.0);
         }
 
