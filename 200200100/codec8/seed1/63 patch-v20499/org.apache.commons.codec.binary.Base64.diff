--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,11 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
+			x = x << 6;
+			resizeBuffer();
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			reset();
+			pos = 0;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -383,7 +387,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
+			readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -418,7 +422,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -449,6 +452,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
+			currentLinePos = 0;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -556,6 +560,7 @@
                             buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                             buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                             buffer[pos++] = (byte) (x & MASK_8BITS);
+							x = x << 6;
                         }
                     }
                 }
