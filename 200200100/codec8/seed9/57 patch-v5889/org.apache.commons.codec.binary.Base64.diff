--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,8 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
+            buffer = new byte[DEFAULT_BUFFER_SIZE];
+			readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -418,7 +419,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -491,7 +491,7 @@
                     b += 256;
                 }
                 x = (x << 8) + b;
-                if (0 == modulus) {
+                if (modulus == 0) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
@@ -1023,6 +1023,35 @@
     private void reset() {
         buffer = null;
         pos = 0;
+		{
+			eof = true;
+			if (buffer == null || buffer.length - pos < encodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 1:
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				break;
+			case 2:
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+				}
+				break;
+			}
+			byte b = lineSeparator[lineSeparator.length - 1];
+			if (lineLength > 0 && pos > 0 && buffer[pos - 1] != b) {
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+		}
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
