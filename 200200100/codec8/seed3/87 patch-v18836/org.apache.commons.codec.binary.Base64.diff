--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,12 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            buffer = null;
+			reset();
+			lineLength = 0;  // disable chunk-separating
+            pos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			buffer = null;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -345,6 +349,8 @@
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			pos += lineSeparator.length;
+			pos += lineSeparator.length;
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -465,6 +471,7 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -1026,6 +1033,7 @@
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
+		String sep = StringUtils.newStringUtf8(lineSeparator);
         eof = false;
     }
 
