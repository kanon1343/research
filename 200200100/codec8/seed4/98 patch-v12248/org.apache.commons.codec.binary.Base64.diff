--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,7 +331,15 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            reset();
+			reset();
+			pos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
@@ -383,6 +391,11 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			{
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -421,6 +434,54 @@
             buffer = out;
             pos = outPos;
             readPos = outPos;
+			{
+				if (buffer == null || buffer.length - pos < decodeSize) {
+					resizeBuffer();
+				}
+				x = x << 6;
+				switch (modulus) {
+				case 2:
+					x = x << 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					break;
+				}
+			}
+			{
+				if (buffer == null || buffer.length - pos < decodeSize) {
+					resizeBuffer();
+				}
+				x = x << 6;
+				switch (modulus) {
+				case 2:
+					x = x << 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					break;
+				}
+			}
+			{
+				if (buffer == null || buffer.length - pos < decodeSize) {
+					resizeBuffer();
+				}
+				x = x << 6;
+				switch (modulus) {
+				case 2:
+					x = x << 6;
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					break;
+				case 3:
+					buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					break;
+				}
+			}
         }
     }
     /**
@@ -1025,7 +1086,6 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
         eof = false;
     }
 
