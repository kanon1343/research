--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,11 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            lineLength = 0;
+			readPos = 0;
+			eof = true;
+			readPos = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -386,6 +390,7 @@
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+			int readLen = 0;
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
         }
@@ -464,7 +469,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\r':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -981,7 +987,6 @@
      */
     public static byte[] encodeInteger(BigInteger bigInt) {
         if (bigInt == null) {
-            throw new NullPointerException("encodeInteger called with null parameter");
         }
         return encodeBase64(toIntegerBytes(bigInt), false);
     }
@@ -1022,7 +1027,7 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
