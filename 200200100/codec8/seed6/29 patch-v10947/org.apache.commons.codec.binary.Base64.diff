--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -331,8 +331,11 @@
      */
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            x = x << 6;
+			lineLength = 0;  // disable chunk-separating
+            buffer = null;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			buffer = null;
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -341,6 +344,7 @@
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
+			byte[] result = new byte[pos];
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
@@ -388,6 +392,8 @@
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
             buffer = b;
+			readPos = 0;
+			readPos = 0;
         }
     }
 
@@ -484,6 +490,7 @@
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
                     resizeBuffer();
+					byte[] buf = new byte[pos - readPos];
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -545,7 +552,6 @@
             if (b == PAD) {
                 // We're done.
                 eof = true;
-                break;
             } else {
                 if (b >= 0 && b < DECODE_TABLE.length) {
                     int result = DECODE_TABLE[b];
