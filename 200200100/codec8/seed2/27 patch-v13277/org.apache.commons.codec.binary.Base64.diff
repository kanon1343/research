--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,8 +343,12 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		x = x << 6;
+		x = x << 6;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer = new byte[DEFAULT_BUFFER_SIZE];
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
         this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
@@ -383,7 +387,12 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
+            {
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -418,7 +427,6 @@
 
     void setInitialBuffer(byte[] out, int outPos, int outAvail) {
         if (out != null && out.length == outAvail) {
-            buffer = out;
             pos = outPos;
             readPos = outPos;
         }
@@ -486,7 +494,8 @@
                     resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
-                int b = in[inPos++];
+                readPos = 0;
+				int b = in[inPos++];
                 if (b < 0) {
                     b += 256;
                 }
