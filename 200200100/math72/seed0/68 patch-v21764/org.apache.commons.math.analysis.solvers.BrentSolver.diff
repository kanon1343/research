--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,22 +99,21 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        double x2 = max;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            setResult(initial, 0);
+			setResult(initial, 0);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.iterationCount = iterationCount;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -227,7 +225,9 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
-        double oldDelta = delta;
+        y2 = y0;
+		y2 = y0;
+		double oldDelta = delta;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -245,6 +245,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				clearResult();
                 return result;
             }
             double dx = x2 - x1;
