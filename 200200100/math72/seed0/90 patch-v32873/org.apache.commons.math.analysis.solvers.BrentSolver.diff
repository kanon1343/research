--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,16 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            setResult(initial, 0);
+			{
+				setResult(initial, 0);
+				return result;
+			}
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -178,7 +180,7 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
+                double x;
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
@@ -227,7 +229,9 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
-        double oldDelta = delta;
+        y2 = y0;
+		y2 = y0;
+		double oldDelta = delta;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -241,7 +245,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                delta = (x0 - x1) / (1 - y0 / y1);
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -306,6 +311,7 @@
                 x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
+			resultComputed = true;
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
