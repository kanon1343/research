--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,14 +106,40 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.f = f;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            double x0 = min;
+			this.functionValueAccuracy = defaultFunctionValueAccuracy;
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +150,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +207,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				double fmin;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -238,7 +264,26 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				clearResult();
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+				y2 = y0;
+                functionValueAccuracy = defaultFunctionValueAccuracy;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
