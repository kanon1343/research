--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,8 +99,8 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
-        verifySequence(min, initial, max);
+        resultComputed = true;
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            this.iterationCount = 0;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +164,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -181,7 +179,30 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.resultComputed = false;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				double oldx = Double.POSITIVE_INFINITY;
+				this.resultComputed = false;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.f = f;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +255,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
