--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +107,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -178,7 +179,6 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
@@ -226,7 +226,9 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +247,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
