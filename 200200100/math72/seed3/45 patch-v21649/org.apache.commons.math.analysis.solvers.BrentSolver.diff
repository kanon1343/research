--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +179,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,14 +242,15 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+			y1 = f.value(x1);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             if ((Math.abs(oldDelta) < tolerance) ||
                     (Math.abs(y0) <= Math.abs(y1))) {
