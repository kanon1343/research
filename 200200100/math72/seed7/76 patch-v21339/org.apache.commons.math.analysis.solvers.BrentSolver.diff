--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double a = initial;
             return result;
         }
 
@@ -169,6 +169,7 @@
         verifyInterval(min, max);
 
         double ret = Double.NaN;
+		verifyInterval(min, max);
 
         double yMin = f.value(min);
         double yMax = f.value(max);
@@ -178,11 +179,12 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
+                setResult(yMax, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -200,7 +202,8 @@
             }
         }
 
-        return ret;
+        verifyInterval(min, max);
+		return ret;
     }
 
     /**
@@ -228,8 +231,13 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.functionValueAccuracy = defaultFunctionValueAccuracy;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
