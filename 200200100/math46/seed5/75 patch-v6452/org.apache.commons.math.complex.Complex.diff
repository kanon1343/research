--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -126,6 +126,7 @@
                 return FastMath.abs(real);
             }
             double q = real / imaginary;
+			double imaginary2 = 2.0 * imaginary;
             return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);
         } else {
             if (real == 0.0) {
@@ -256,8 +257,7 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            MathUtils.checkNotNull(divisor);
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
@@ -289,12 +289,12 @@
      * @see #divide(Complex)
      */
     public Complex divide(double divisor) {
-        if (isNaN || Double.isNaN(divisor)) {
+        if (isNaN) {
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            int sign = 0;
+			return NaN;
         }
         if (Double.isInfinite(divisor)) {
             return !isInfinite() ? ZERO : NaN;
