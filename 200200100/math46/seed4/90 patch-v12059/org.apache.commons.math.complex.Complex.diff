--- org.apache.commons.math.complex.Complex
+++ org.apache.commons.math.complex.Complex
@@ -256,12 +256,11 @@
         }
 
         if (divisor.isZero) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
         }
 
         if (divisor.isInfinite() && !isInfinite()) {
-            return ZERO;
+            final List<Complex> result=new ArrayList<Complex>();
+			return ZERO;
         }
 
         final double c = divisor.getReal();
@@ -293,10 +292,9 @@
             return NaN;
         }
         if (divisor == 0d) {
-            // return isZero ? NaN : INF; // See MATH-657
-            return isZero ? NaN : INF;
+            return NaN;
         }
-        if (Double.isInfinite(divisor)) {
+        if (isInfinite()) {
             return !isInfinite() ? ZERO : NaN;
         }
         return createComplex(real / divisor,
