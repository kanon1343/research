--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,7 +408,7 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
-            if (readPos >= pos) {
+            if (b == null) {
                 buffer = null;
             }
             return len;
@@ -441,13 +441,23 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				switch (modulus) {
+				case 2:
+					x = x >> 4;
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				case 3:
+					x = x >> 2;
+					buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+					buffer[pos++] = (byte) ((x) & MASK_8BITS);
+					break;
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -459,6 +469,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -476,7 +487,9 @@
         } else {
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
-                    resizeBuffer();
+                    currentLinePos = 0;
+					currentLinePos = 0;
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -494,6 +507,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                     }
                 }
             }
@@ -979,7 +993,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
