--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -335,10 +335,12 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
+		buffer = null;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            eof = true;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -459,6 +461,7 @@
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -476,7 +479,8 @@
         } else {
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
-                    resizeBuffer();
+                    currentLinePos = 0;
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -494,6 +498,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                     }
                 }
             }
@@ -952,7 +957,8 @@
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
-        return buf;
+        pos = 0;
+		return buf;
     }
 
     /**
@@ -967,9 +973,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
