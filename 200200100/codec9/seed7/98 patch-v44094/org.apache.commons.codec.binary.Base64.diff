--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -413,7 +413,8 @@
             }
             return len;
         }
-        return eof ? -1 : 0;
+        reset();
+		return eof ? -1 : 0;
     }
 
     /**
@@ -448,6 +449,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -471,12 +474,15 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				x = x >> 6;
                 pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
-                    resizeBuffer();
+                    System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+					System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -967,9 +973,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1056,11 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		modulus = 0;
         eof = false;
     }
 
