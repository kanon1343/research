--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -336,7 +336,8 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        int readLen = 0;
+		System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
@@ -435,7 +436,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (containsBase64Byte(lineSeparator)) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -493,7 +494,45 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						modulus = 0;
                     }
                 }
             }
@@ -973,7 +1012,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
