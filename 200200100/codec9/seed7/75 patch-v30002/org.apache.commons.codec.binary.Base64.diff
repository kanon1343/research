--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -413,7 +413,9 @@
             }
             return len;
         }
-        return eof ? -1 : 0;
+        reset();
+		reset();
+		return eof ? -1 : 0;
     }
 
     /**
@@ -441,7 +443,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -476,7 +477,9 @@
         } else {
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
-                    resizeBuffer();
+                    System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+					System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -493,7 +496,118 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1087,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1167,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		modulus = 0;
         eof = false;
     }
 
