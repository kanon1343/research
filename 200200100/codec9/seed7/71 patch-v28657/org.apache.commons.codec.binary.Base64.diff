--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -408,12 +408,25 @@
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+				currentLinePos = 0;
+			}
+			{
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+				currentLinePos = 0;
+			}
             if (readPos >= pos) {
                 buffer = null;
             }
             return len;
         }
-        return eof ? -1 : 0;
+        reset();
+		reset();
+		reset();
+		return eof ? -1 : 0;
     }
 
     /**
@@ -493,7 +506,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
+						modulus = 0;
                     }
                 }
             }
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1068,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+		modulus = 0;
         eof = false;
     }
 
