--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -409,7 +408,25 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                switch (modulus) {
+				case 1:
+					buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+					buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+					if (encodeTable == STANDARD_ENCODE_TABLE) {
+						buffer[pos++] = PAD;
+						buffer[pos++] = PAD;
+					}
+					break;
+				case 2:
+					buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+					buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+					buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+					if (encodeTable == STANDARD_ENCODE_TABLE) {
+						buffer[pos++] = PAD;
+					}
+					break;
+				}
+				buffer = null;
             }
             return len;
         }
@@ -447,7 +464,8 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				int readLen = 0;
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -471,7 +489,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				x = x >> 6;
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +514,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						modulus = 0;
                     }
                 }
             }
@@ -973,7 +994,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
