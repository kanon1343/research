--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -409,7 +410,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -493,6 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,11 +975,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
