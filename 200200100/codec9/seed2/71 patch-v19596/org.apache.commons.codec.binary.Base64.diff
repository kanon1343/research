--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +413,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,14 +438,14 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (lineLength > 0 && lineLength <= currentLinePos) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0 && lineLength <= currentLinePos) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -492,6 +495,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						byte[] result = new byte[pos];
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
