--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +412,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +438,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (lineLength > 0 && lineLength <= currentLinePos) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -452,6 +455,11 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						{
+							byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+							System.arraycopy(buffer, 0, b, 0, buffer.length);
+							buffer = b;
+						}
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -472,6 +480,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,7 +501,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						byte[] result = new byte[pos];
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1062,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
