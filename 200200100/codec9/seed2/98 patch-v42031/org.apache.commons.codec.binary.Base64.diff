--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -472,6 +475,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +497,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -967,13 +975,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1055,9 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
