--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,7 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		modulus = (++modulus) % 3;
     }
 
     /**
@@ -413,7 +414,8 @@
             }
             return len;
         }
-        return eof ? -1 : 0;
+        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		return eof ? -1 : 0;
     }
 
     /**
@@ -452,6 +454,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						eof = true;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -471,7 +474,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                readPos = 0;
+				readPos = 0;
+				readPos = 0;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -980,6 +986,7 @@
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
+				return -1;
             }
         }
         return len;
@@ -1052,9 +1059,9 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
