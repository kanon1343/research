--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -342,7 +342,10 @@
         } else {
             this.encodeSize = 4;
         }
-        this.decodeSize = this.encodeSize - 1;
+        resizeBuffer();
+		resizeBuffer();
+		resizeBuffer();
+		this.decodeSize = this.encodeSize - 1;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -413,7 +416,10 @@
             }
             return len;
         }
-        return eof ? -1 : 0;
+        eof = true;
+		System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+		eof = true;
+		return eof ? -1 : 0;
     }
 
     /**
@@ -471,7 +477,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                readPos = 0;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -951,6 +958,7 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
+		buffer[pos++] = encodeTable[x & MASK_6BITS];
         readResults(buf, 0, buf.length);
         return buf;
     }
@@ -979,7 +987,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1061,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
