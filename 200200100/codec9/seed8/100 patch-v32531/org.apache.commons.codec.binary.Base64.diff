--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,12 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
+            {
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(buffer, 0, b, 0, buffer.length);
+				buffer = b;
+			}
+			readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -413,7 +418,10 @@
             }
             return len;
         }
-        return eof ? -1 : 0;
+        eof = true;
+		eof = true;
+		eof = true;
+		return eof ? -1 : 0;
     }
 
     /**
@@ -443,7 +451,7 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
+                reset();
             }
             switch (modulus) {
                 case 1 :
@@ -471,7 +479,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                resizeBuffer();
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -972,12 +981,11 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (pArray == null || pArray.length == 0) {
             len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1052,9 +1060,9 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
