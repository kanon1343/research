--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +442,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +471,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,11 +977,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1054,7 +1056,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
