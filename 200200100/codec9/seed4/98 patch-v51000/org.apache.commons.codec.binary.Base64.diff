--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +436,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -444,15 +445,42 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
+						resizeBuffer();
+						resizeBuffer();
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,7 +499,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                eof = false;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -524,7 +553,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void decode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         if (inAvail < 0) {
@@ -973,7 +1002,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1082,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
