--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            readPos = 0;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -442,7 +443,8 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+			resizeBuffer();
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -951,7 +953,9 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readResults(buf, 0, buf.length);
+		resizeBuffer();
         return buf;
     }
 
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1056,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
