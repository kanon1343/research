--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -442,7 +441,10 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+            if (buffer == null || buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -967,9 +969,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +978,7 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+                return len;
             }
         }
         return len;
@@ -1053,7 +1052,7 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
+        eof = true;
         modulus = 0;
         eof = false;
     }
