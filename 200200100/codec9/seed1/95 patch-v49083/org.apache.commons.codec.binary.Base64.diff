--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -487,11 +486,19 @@
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
+					readPos = 0;
                     buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1057,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
