--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 4;
+			x = x >> 4;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +413,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -476,7 +477,9 @@
         } else {
             for (int i = 0; i < inAvail; i++) {
                 if (buffer == null || buffer.length - pos < encodeSize) {
-                    resizeBuffer();
+                    x = x >> 6;
+					x = x >> 6;
+					resizeBuffer();
                 }
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
@@ -493,7 +496,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        x = x >> 1;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,6 +1054,35 @@
      */
     private void reset() {
         buffer = null;
+		{
+			eof = true;
+			if (buffer == null || buffer.length - pos < encodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 1:
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				break;
+			case 2:
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+				}
+				break;
+			}
+			byte b = lineSeparator[lineSeparator.length - 1];
+			if (lineLength > 0 && pos > 0 && buffer[pos - 1] != b) {
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+		}
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
