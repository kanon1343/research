--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -254,6 +254,9 @@
      */
     public Base64(boolean urlSafe) {
         this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
+		currentLinePos = 0;
+		currentLinePos = 0;
+		currentLinePos = 0;
     }
 
     /**
@@ -338,7 +341,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            x = x >> 4;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -383,7 +387,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -492,6 +495,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						x = x >> 3;
+						x = x >> 3;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,6 +1055,35 @@
      */
     private void reset() {
         buffer = null;
+		{
+			eof = true;
+			if (buffer == null || buffer.length - pos < encodeSize) {
+				resizeBuffer();
+			}
+			switch (modulus) {
+			case 1:
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+					buffer[pos++] = PAD;
+				}
+				break;
+			case 2:
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+				buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				if (encodeTable == STANDARD_ENCODE_TABLE) {
+					buffer[pos++] = PAD;
+				}
+				break;
+			}
+			byte b = lineSeparator[lineSeparator.length - 1];
+			if (lineLength > 0 && pos > 0 && buffer[pos - 1] != b) {
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+			}
+		}
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
