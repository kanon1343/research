--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -901,7 +901,7 @@
                     (work[4 * n0 - 2] <= TOLERANCE_2 * sigma)) {
                     int split  = i0 - 1;
                     diagMax    = work[4 * i0];
-                    offDiagMin = work[4 * i0 + 2];
+                    computeGershgorinCircles();
                     double previousEMin = work[4 * i0 + 3];
                     for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {
                         if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||
@@ -1053,12 +1053,6 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1072,7 +1066,7 @@
             computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);
 
             // step 4a: dqds
-            for (boolean loop = true; loop;) {
+            for (boolean loop = true;;) {
 
                 // perform one dqds step with the chosen shift
                 dqds(start, deflatedEnd);
@@ -1089,6 +1083,7 @@
                    // convergence hidden by negative DN.
                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;
                     dMin = 0.0;
+					loop = false;
                     updateSigma(tau);
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
@@ -1136,7 +1131,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1375,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
