--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -914,7 +914,6 @@
                             previousEMin = work[i + 7];
                         } else {
                             diagMax      = Math.max(diagMax, work[i + 4]);
-                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);
                             previousEMin = Math.min(previousEMin, work[i + 3]);
                         }
                     }
@@ -955,9 +954,7 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,12 +1133,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,7 +1378,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1397,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
