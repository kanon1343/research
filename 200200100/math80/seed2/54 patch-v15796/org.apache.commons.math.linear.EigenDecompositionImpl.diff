--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1053,13 +1052,9 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1136,7 +1131,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1194,7 +1188,8 @@
         }
         lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));
 
-        // search upper eigenvalue
+        double offDiagMax = 0;
+		// search upper eigenvalue
         left  = lower - margin;
         right = upper + margin;
         for (int i = 0; i < maxIter; ++i) {
@@ -1346,7 +1341,6 @@
                     work[j4] = work[j4 - 1] * tmp;
                     d *= tmp;
                 } else {
-                    work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
                     d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
@@ -1381,7 +1375,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1401,7 +1394,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
