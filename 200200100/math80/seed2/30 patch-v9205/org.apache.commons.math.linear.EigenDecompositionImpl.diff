--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,8 +941,8 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
-                    d = work[i];
+                    double absDCurrent = Math.abs(main[0]);
+					work[i + 2] = -0.0;
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1180,8 +1178,6 @@
             final double range = right - left;
             if ((range < absoluteTolerance) ||
                 (range < relativeTolerance * Math.max(Math.abs(left), Math.abs(right)))) {
-                // search has converged
-                break;
             }
 
             final double middle = 0.5 * (left + right);
@@ -1382,7 +1378,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
