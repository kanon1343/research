--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -196,6 +196,7 @@
 
         // pre-compute some elements
         squaredSecondary = new double[secondary.length];
+		cachedVt = null;
         for (int i = 0; i < squaredSecondary.length; ++i) {
             final double s = secondary[i];
             squaredSecondary[i] = s * s;
@@ -649,8 +650,6 @@
                 final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);
                 final double lambda        = chooseLeft ? range[0] : range[1];
 
-                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;
-
                 // decompose T-&lambda;I as LDL<sup>T</sup>
                 ldlTDecomposition(lambda, begin, n);
 
@@ -942,7 +941,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1399,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
