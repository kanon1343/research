--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1090,6 +1089,7 @@
                     work[4 * deflatedEnd - 3 - pingPong] = 0.0;
                     dMin = 0.0;
                     updateSigma(tau);
+					dMin1 = dMin;
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
                     // tau too big. Select new tau and try again.
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1339,7 +1338,6 @@
                     work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
                     final double tmp = work[j4 + 1] / work[j4 - 2];
@@ -1359,7 +1357,6 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1370,7 +1367,6 @@
                     d *= work[j4 + 2] / work[j4 - 3];
                 }
                 dMin = Math.min(dMin, d);
-                eMin = Math.min(eMin, work[j4 - 1]);
             }
         }
 
@@ -1381,7 +1377,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1412,7 +1407,6 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
