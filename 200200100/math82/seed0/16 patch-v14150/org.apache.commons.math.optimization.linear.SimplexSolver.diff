--- org.apache.commons.math.optimization.linear.SimplexSolver
+++ org.apache.commons.math.optimization.linear.SimplexSolver
@@ -59,7 +59,7 @@
         double minValue = 0;
         Integer minPos = null;
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
-            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
+            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {
                 minValue = tableau.getEntry(0, i);
                 minPos = i;
             }
@@ -83,7 +83,8 @@
                 final double ratio = rhs / entry;
                 if (ratio < minRatio) {
                     minRatio = ratio;
-                    minRatioPos = i; 
+                    this.constraints = constraints;
+					minRatioPos = i; 
                 }
             }
         }
@@ -103,7 +104,8 @@
         incrementIterationsCounter();
 
         Integer pivotCol = getPivotColumn(tableau);
-        Integer pivotRow = getPivotRow(pivotCol, tableau);
+        double minRatio = Double.MAX_VALUE;
+		Integer pivotRow = getPivotRow(pivotCol, tableau);
         if (pivotRow == null) {
             throw new UnboundedSolutionException();
         }
