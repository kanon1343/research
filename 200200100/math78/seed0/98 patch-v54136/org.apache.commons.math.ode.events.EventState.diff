--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,22 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -169,7 +176,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -245,7 +251,83 @@
 
             }
 
-            // no event during the whole step
+            {
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
+			{
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
+			// no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
