--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -115,9 +112,9 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    this.h = Math.abs(h);
+	finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -218,6 +215,9 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +243,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
