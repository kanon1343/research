--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -159,6 +159,7 @@
         verifyInterval(min, max);
 
         double ret = Double.NaN;
+		double x0 = min;
 
         double yMin = f.value(min);
         double yMax = f.value(max);
@@ -218,7 +219,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        this.iterationCount = iterationCount;
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -276,13 +278,8 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
