--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,8 +112,12 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +222,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -269,7 +279,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
