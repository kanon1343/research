--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -179,8 +179,6 @@
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
-                tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
@@ -247,7 +245,44 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            {
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
             return false;
 
         } catch (FunctionEvaluationException e) {
